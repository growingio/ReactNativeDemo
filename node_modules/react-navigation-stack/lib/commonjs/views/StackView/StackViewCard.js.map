{"version":3,"sources":["StackViewCard.tsx"],"names":["EPS","getAccessibilityProps","isActive","Platform","OS","accessibilityElementsHidden","importantForAccessibility","Card","props","children","pointerEvents","style","position","transparent","scene","index","active","select","web","default","interpolate","inputRange","outputRange","extrapolate","animatedStyle","shadowOpacity","overlayOpacity","containerAnimatedStyle","flattenedStyle","StyleSheet","flatten","backgroundColor","screenStyle","onComponentRef","styles","shadow","card","overlay","opacity","React","Component","create","flex","absoluteFillObject","top","left","bottom","width","shadowOffset","height","shadowRadius","shadowColor"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  Animated,\n  StyleSheet,\n  Platform,\n  StyleProp,\n  ViewStyle,\n} from 'react-native';\nimport { Screen } from 'react-native-screens';\nimport createPointerEventsContainer, {\n  InputProps,\n  InjectedProps,\n} from './createPointerEventsContainer';\n\ntype Props = InputProps &\n  InjectedProps & {\n    style: StyleProp<ViewStyle>;\n    animatedStyle: any;\n    position: Animated.AnimatedInterpolation;\n    transparent?: boolean;\n    children: React.ReactNode;\n  };\n\nconst EPS = 1e-5;\n\nfunction getAccessibilityProps(isActive: boolean) {\n  if (Platform.OS === 'ios') {\n    return {\n      accessibilityElementsHidden: !isActive,\n    };\n  } else if (Platform.OS === 'android') {\n    return {\n      importantForAccessibility: isActive ? 'yes' : 'no-hide-descendants',\n    };\n  } else {\n    return {};\n  }\n}\n\n/**\n * Component that renders the scene as card for the <StackView />.\n */\nclass Card extends React.Component<Props> {\n  render() {\n    const {\n      children,\n      pointerEvents,\n      style,\n      position,\n      transparent,\n      scene: { index, isActive },\n    } = this.props;\n\n    const active: Animated.Value | number | boolean = Platform.select({\n      web: isActive,\n      // @ts-ignore\n      default:\n        transparent || isActive\n          ? 1\n          : position.interpolate({\n              inputRange: [index, index + 1 - EPS, index + 1],\n              outputRange: [1, 1, 0],\n              extrapolate: 'clamp',\n            }),\n    });\n\n    // animatedStyle can be `false` if there is no screen interpolator\n    const animatedStyle = this.props.animatedStyle || {};\n\n    const {\n      shadowOpacity,\n      overlayOpacity,\n      ...containerAnimatedStyle\n    } = animatedStyle;\n\n    let flattenedStyle = StyleSheet.flatten(style) || {};\n    let { backgroundColor, ...screenStyle } = flattenedStyle;\n\n    return (\n      <Screen\n        pointerEvents={pointerEvents}\n        onComponentRef={this.props.onComponentRef}\n        style={[containerAnimatedStyle, screenStyle]}\n        // @ts-ignore\n        active={active}\n      >\n        {!transparent && shadowOpacity ? (\n          <Animated.View\n            style={[styles.shadow, { shadowOpacity }]}\n            pointerEvents=\"none\"\n          />\n        ) : null}\n        <Animated.View\n          {...getAccessibilityProps(isActive)}\n          style={[\n            transparent ? styles.transparent : styles.card,\n            backgroundColor && backgroundColor !== 'transparent'\n              ? { backgroundColor }\n              : null,\n          ]}\n        >\n          {children}\n        </Animated.View>\n        {overlayOpacity ? (\n          <Animated.View\n            pointerEvents=\"none\"\n            style={[styles.overlay, { opacity: overlayOpacity }]}\n          />\n        ) : null}\n      </Screen>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  card: {\n    flex: 1,\n    backgroundColor: '#fff',\n  },\n  overlay: {\n    ...StyleSheet.absoluteFillObject,\n    backgroundColor: '#000',\n  },\n  shadow: {\n    top: 0,\n    left: 0,\n    bottom: 0,\n    width: 3,\n    position: 'absolute',\n    backgroundColor: '#fff',\n    shadowOffset: { width: -1, height: 1 },\n    shadowRadius: 5,\n    shadowColor: '#000',\n  },\n  transparent: {\n    flex: 1,\n    backgroundColor: 'transparent',\n  },\n});\n\nexport default createPointerEventsContainer(Card);\n"]}