{"version":3,"sources":["shallowEqual.tsx"],"names":["hasOwnProperty","Object","prototype","is","x","y","shallowEqual","objA","objB","keysA","keys","keysB","length","i","call"],"mappings":"AAAA,GAAMA,CAAAA,cAAc,CAAGC,MAAM,CAACC,SAAP,CAAiBF,cAAxC,CAMA,QAASG,CAAAA,EAAT,CAAYC,CAAZ,CAAoBC,CAApB,CAA4B,CAE1B,GAAID,CAAC,GAAKC,CAAV,CAAa,CAIX,MAAOD,CAAAA,CAAC,GAAK,CAAN,EAAWC,CAAC,GAAK,CAAjB,EAAsB,EAAID,CAAJ,GAAU,EAAIC,CAA3C,CACD,CALD,IAKO,CAEL,MAAOD,CAAAA,CAAC,GAAKA,CAAN,EAAWC,CAAC,GAAKA,CAAxB,CACD,CACF,CAOD,QAASC,CAAAA,YAAT,CAAsBC,IAAtB,CAAiCC,IAAjC,CAA4C,CAC1C,GAAIL,EAAE,CAACI,IAAD,CAAOC,IAAP,CAAN,CAAoB,CAClB,MAAO,KAAP,CACD,CACD,GACE,MAAOD,CAAAA,IAAP,GAAgB,QAAhB,EACAA,IAAI,GAAK,IADT,EAEA,MAAOC,CAAAA,IAAP,GAAgB,QAFhB,EAGAA,IAAI,GAAK,IAJX,CAKE,CACA,MAAO,MAAP,CACD,CAED,GAAMC,CAAAA,KAAK,CAAGR,MAAM,CAACS,IAAP,CAAYH,IAAZ,CAAd,CACA,GAAMI,CAAAA,KAAK,CAAGV,MAAM,CAACS,IAAP,CAAYF,IAAZ,CAAd,CAEA,GAAIC,KAAK,CAACG,MAAN,GAAiBD,KAAK,CAACC,MAA3B,CAAmC,CACjC,MAAO,MAAP,CACD,CAGD,IAAK,GAAIC,CAAAA,CAAC,CAAG,CAAb,CAAgBA,CAAC,CAAGJ,KAAK,CAACG,MAA1B,CAAkCC,CAAC,EAAnC,CAAuC,CACrC,GACE,CAACb,cAAc,CAACc,IAAf,CAAoBN,IAApB,CAA0BC,KAAK,CAACI,CAAD,CAA/B,CAAD,EACA,CAACV,EAAE,CAACI,IAAI,CAACE,KAAK,CAACI,CAAD,CAAN,CAAL,CAAiBL,IAAI,CAACC,KAAK,CAACI,CAAD,CAAN,CAArB,CAFL,CAGE,CACA,MAAO,MAAP,CACD,CACF,CAED,MAAO,KAAP,CACD,CAED,cAAeP,CAAAA,YAAf","sourcesContent":["const hasOwnProperty = Object.prototype.hasOwnProperty;\n\n/**\n * inlined Object.is polyfill to avoid requiring consumers ship their own\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is\n */\nfunction is(x: any, y: any) {\n  // SameValue algorithm\n  if (x === y) {\n    // Steps 1-5, 7-10\n    // Steps 6.b-6.e: +0 != -0\n    // Added the nonzero y check to make Flow happy, but it is redundant\n    return x !== 0 || y !== 0 || 1 / x === 1 / y;\n  } else {\n    // Step 6.a: NaN == NaN\n    return x !== x && y !== y;\n  }\n}\n\n/**\n * Performs equality by iterating through keys on an object and returning false\n * when any key has values which are not strictly equal between the arguments.\n * Returns true when the values of all keys are strictly equal.\n */\nfunction shallowEqual(objA: any, objB: any) {\n  if (is(objA, objB)) {\n    return true;\n  }\n  if (\n    typeof objA !== 'object' ||\n    objA === null ||\n    typeof objB !== 'object' ||\n    objB === null\n  ) {\n    return false;\n  }\n\n  const keysA = Object.keys(objA);\n  const keysB = Object.keys(objB);\n\n  if (keysA.length !== keysB.length) {\n    return false;\n  }\n\n  // Test for A's keys different from B.\n  for (let i = 0; i < keysA.length; i++) {\n    if (\n      !hasOwnProperty.call(objB, keysA[i]) ||\n      !is(objA[keysA[i]], objB[keysA[i]])\n    ) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nexport default shallowEqual;\n"]}