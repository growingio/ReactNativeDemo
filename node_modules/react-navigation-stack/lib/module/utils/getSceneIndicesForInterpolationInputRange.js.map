{"version":3,"sources":["getSceneIndicesForInterpolationInputRange.tsx"],"names":["getSceneIndicesForInterpolationInputRange","props","scene","scenes","index","lastSceneIndexInScenes","length","isBack","isActive","currentSceneIndexInScenes","findIndex","item","targetSceneIndexInScenes","targetSceneIndex","lastSceneIndex","first","Math","min","last","max"],"mappings":"AAOA,QAASA,CAAAA,yCAAT,CAAmDC,KAAnD,CAAiE,IACvDC,CAAAA,KADuD,CACrCD,KADqC,CACvDC,KADuD,CAChDC,MADgD,CACrCF,KADqC,CAChDE,MADgD,CAE/D,GAAMC,CAAAA,KAAK,CAAGF,KAAK,CAACE,KAApB,CACA,GAAMC,CAAAA,sBAAsB,CAAGF,MAAM,CAACG,MAAP,CAAgB,CAA/C,CACA,GAAMC,CAAAA,MAAM,CAAG,CAACJ,MAAM,CAACE,sBAAD,CAAN,CAA+BG,QAA/C,CAEA,GAAID,MAAJ,CAAY,CACV,GAAME,CAAAA,yBAAyB,CAAGN,MAAM,CAACO,SAAP,CAAiB,SAAAC,IAAI,QAAIA,CAAAA,IAAI,GAAKT,KAAb,EAArB,CAAlC,CACA,GAAMU,CAAAA,wBAAwB,CAAGT,MAAM,CAACO,SAAP,CAAiB,SAAAC,IAAI,QAAIA,CAAAA,IAAI,CAACH,QAAT,EAArB,CAAjC,CACA,GAAMK,CAAAA,gBAAgB,CAAGV,MAAM,CAACS,wBAAD,CAAN,CAAiCR,KAA1D,CACA,GAAMU,CAAAA,cAAc,CAAGX,MAAM,CAACE,sBAAD,CAAN,CAA+BD,KAAtD,CAEA,GACEA,KAAK,GAAKS,gBAAV,EACAJ,yBAAyB,GAAKJ,sBAFhC,CAGE,CACA,MAAO,CACLU,KAAK,CAAEC,IAAI,CAACC,GAAL,CAASJ,gBAAT,CAA2BT,KAAK,CAAG,CAAnC,CADF,CAELc,IAAI,CAAEd,KAAK,CAAG,CAFT,CAAP,CAID,CARD,IAQO,IACLA,KAAK,GAAKS,gBAAV,EACAJ,yBAAyB,GAAKG,wBAFzB,CAGL,CACA,MAAO,CACLG,KAAK,CAAEX,KAAK,CAAG,CADV,CAELc,IAAI,CAAEF,IAAI,CAACG,GAAL,CAASL,cAAT,CAAyBV,KAAK,CAAG,CAAjC,CAFD,CAAP,CAID,CARM,IAQA,IACLA,KAAK,GAAKS,gBAAV,EACAJ,yBAAyB,CAAGG,wBAFvB,CAGL,CACA,MAAO,KAAP,CACD,CALM,IAKA,CACL,MAAO,CAAEG,KAAK,CAAEX,KAAK,CAAG,CAAjB,CAAoBc,IAAI,CAAEd,KAAK,CAAG,CAAlC,CAAP,CACD,CACF,CA9BD,IA8BO,CACL,MAAO,CAAEW,KAAK,CAAEX,KAAK,CAAG,CAAjB,CAAoBc,IAAI,CAAEd,KAAK,CAAG,CAAlC,CAAP,CACD,CACF,CAED,cAAeJ,CAAAA,yCAAf","sourcesContent":["import { Scene } from '../types';\n\ntype Props = {\n  scene: Scene;\n  scenes: Scene[];\n};\n\nfunction getSceneIndicesForInterpolationInputRange(props: Props) {\n  const { scene, scenes } = props;\n  const index = scene.index;\n  const lastSceneIndexInScenes = scenes.length - 1;\n  const isBack = !scenes[lastSceneIndexInScenes].isActive;\n\n  if (isBack) {\n    const currentSceneIndexInScenes = scenes.findIndex(item => item === scene);\n    const targetSceneIndexInScenes = scenes.findIndex(item => item.isActive);\n    const targetSceneIndex = scenes[targetSceneIndexInScenes].index;\n    const lastSceneIndex = scenes[lastSceneIndexInScenes].index;\n\n    if (\n      index !== targetSceneIndex &&\n      currentSceneIndexInScenes === lastSceneIndexInScenes\n    ) {\n      return {\n        first: Math.min(targetSceneIndex, index - 1),\n        last: index + 1,\n      };\n    } else if (\n      index === targetSceneIndex &&\n      currentSceneIndexInScenes === targetSceneIndexInScenes\n    ) {\n      return {\n        first: index - 1,\n        last: Math.max(lastSceneIndex, index + 1),\n      };\n    } else if (\n      index === targetSceneIndex ||\n      currentSceneIndexInScenes > targetSceneIndexInScenes\n    ) {\n      return null;\n    } else {\n      return { first: index - 1, last: index + 1 };\n    }\n  } else {\n    return { first: index - 1, last: index + 1 };\n  }\n}\n\nexport default getSceneIndicesForInterpolationInputRange;\n"]}