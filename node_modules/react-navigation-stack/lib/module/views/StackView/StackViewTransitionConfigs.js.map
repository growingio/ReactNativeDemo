{"version":3,"sources":["StackViewTransitionConfigs.tsx"],"names":["Animated","Easing","Platform","StyleInterpolator","supportsImprovedSpringAnimation","IOSTransitionSpec","timing","spring","stiffness","damping","mass","overshootClamping","restDisplacementThreshold","restSpeedThreshold","duration","easing","bezier","SlideFromRightIOS","transitionSpec","screenInterpolator","forHorizontal","containerStyle","backgroundColor","ModalSlideFromBottomIOS","forVertical","FadeInFromBottomAndroid","out","poly","forFadeFromBottomAndroid","FadeOutToBottomAndroid","in","linear","forFadeToBottomAndroid","NoAnimation","forNoAnimation","defaultTransitionConfig","transitionProps","prevTransitionProps","isModal","OS","index","getTransitionConfig","transitionConfigurer","defaultConfig"],"mappings":"+DAAA,OAASA,QAAT,CAAmBC,MAAnB,CAA2BC,QAA3B,KAA2C,cAA3C,CACA,MAAOC,CAAAA,iBAAP,KAA8B,8BAA9B,CACA,OAASC,+BAAT,KAAgD,iCAAhD,CAGA,GAAIC,CAAAA,iBAAJ,CACA,GAAID,+BAA+B,EAAnC,CAAuC,CAErCC,iBAAiB,CAAG,CAClBC,MAAM,CAAEN,QAAQ,CAACO,MADC,CAElBC,SAAS,CAAE,IAFO,CAGlBC,OAAO,CAAE,GAHS,CAIlBC,IAAI,CAAE,CAJY,CAKlBC,iBAAiB,CAAE,IALD,CAMlBC,yBAAyB,CAAE,IANT,CAOlBC,kBAAkB,CAAE,IAPF,CAApB,CASD,CAXD,IAWO,CAELR,iBAAiB,CAAG,CAClBS,QAAQ,CAAE,GADQ,CAElBC,MAAM,CAAEd,MAAM,CAACe,MAAP,CAAc,MAAd,CAAsB,IAAtB,CAA4B,OAA5B,CAAqC,IAArC,CAFU,CAGlBV,MAAM,CAAEN,QAAQ,CAACM,MAHC,CAApB,CAKD,CAGD,GAAMW,CAAAA,iBAAiB,CAAG,CACxBC,cAAc,CAAEb,iBADQ,CAExBc,kBAAkB,CAAEhB,iBAAiB,CAACiB,aAFd,CAGxBC,cAAc,CAAE,CACdC,eAAe,CAAE,MADH,CAHQ,CAA1B,CASA,GAAMC,CAAAA,uBAAuB,CAAG,CAC9BL,cAAc,CAAEb,iBADc,CAE9Bc,kBAAkB,CAAEhB,iBAAiB,CAACqB,WAFR,CAG9BH,cAAc,CAAE,CACdC,eAAe,CAAE,MADH,CAHc,CAAhC,CASA,GAAMG,CAAAA,uBAAuB,CAAG,CAE9BP,cAAc,CAAE,CACdJ,QAAQ,CAAE,GADI,CAEdC,MAAM,CAAEd,MAAM,CAACyB,GAAP,CAAWzB,MAAM,CAAC0B,IAAP,CAAY,CAAZ,CAAX,CAFM,CAGdrB,MAAM,CAAEN,QAAQ,CAACM,MAHH,CAFc,CAO9Ba,kBAAkB,CAAEhB,iBAAiB,CAACyB,wBAPR,CAAhC,CAWA,GAAMC,CAAAA,sBAAsB,CAAG,CAE7BX,cAAc,CAAE,CACdJ,QAAQ,CAAE,GADI,CAEdC,MAAM,CAAEd,MAAM,CAAC6B,EAAP,CAAU7B,MAAM,CAAC8B,MAAjB,CAFM,CAGdzB,MAAM,CAAEN,QAAQ,CAACM,MAHH,CAFa,CAO7Ba,kBAAkB,CAAEhB,iBAAiB,CAAC6B,sBAPT,CAA/B,CAUA,GAAMC,CAAAA,WAAW,CAAG,CAClBf,cAAc,CAAE,CACdJ,QAAQ,CAAE,CADI,CAEdR,MAAM,CAAEN,QAAQ,CAACM,MAFH,CADE,CAKlBa,kBAAkB,CAAEhB,iBAAiB,CAAC+B,cALpB,CAMlBb,cAAc,CAAE,CACdC,eAAe,CAAE,MADH,CANE,CAApB,CAWA,QAASa,CAAAA,uBAAT,CACEC,eADF,CAEEC,mBAFF,CAGEC,OAHF,CAIoB,CAClB,GAAIpC,QAAQ,CAACqC,EAAT,GAAgB,KAApB,CAA2B,CAGzB,GACEF,mBAAmB,EACnBD,eAAe,CAACI,KAAhB,CAAwBH,mBAAmB,CAACG,KAF9C,CAGE,CAEA,MAAOX,CAAAA,sBAAP,CACD,CACD,MAAOJ,CAAAA,uBAAP,CACD,CAED,GAAIa,OAAJ,CAAa,CACX,MAAOf,CAAAA,uBAAP,CACD,CACD,MAAON,CAAAA,iBAAP,CACD,CAED,QAASwB,CAAAA,mBAAT,CACEC,oBADF,CAQEN,eARF,CASEC,mBATF,CAUEC,OAVF,CAWwB,CACtB,GAAMK,CAAAA,aAAa,CAAGR,uBAAuB,CAC3CC,eAD2C,CAE3CC,mBAF2C,CAG3CC,OAH2C,CAA7C,CAKA,GAAII,oBAAJ,CAA0B,CACxB,wBACKC,aADL,CAEKD,oBAAoB,CAACN,eAAD,CAAkBC,mBAAlB,CAAuCC,OAAvC,CAFzB,EAID,CAED,MAAOK,CAAAA,aAAP,CACD,CAED,cAAe,CACbR,uBAAuB,CAAvBA,uBADa,CAEbM,mBAAmB,CAAnBA,mBAFa,CAGbxB,iBAAiB,CAAjBA,iBAHa,CAIbM,uBAAuB,CAAvBA,uBAJa,CAKbE,uBAAuB,CAAvBA,uBALa,CAMbI,sBAAsB,CAAtBA,sBANa,CAObI,WAAW,CAAXA,WAPa,CAAf","sourcesContent":["import { Animated, Easing, Platform } from 'react-native';\nimport StyleInterpolator from './StackViewStyleInterpolator';\nimport { supportsImprovedSpringAnimation } from '../../utils/ReactNativeFeatures';\nimport { TransitionProps, TransitionConfig } from '../../types';\n\nlet IOSTransitionSpec;\nif (supportsImprovedSpringAnimation()) {\n  // These are the exact values from UINavigationController's animation configuration\n  IOSTransitionSpec = {\n    timing: Animated.spring,\n    stiffness: 1000,\n    damping: 500,\n    mass: 3,\n    overshootClamping: true,\n    restDisplacementThreshold: 0.01,\n    restSpeedThreshold: 0.01,\n  };\n} else {\n  // This is an approximation of the IOS spring animation using a derived bezier curve\n  IOSTransitionSpec = {\n    duration: 500,\n    easing: Easing.bezier(0.2833, 0.99, 0.31833, 0.99),\n    timing: Animated.timing,\n  };\n}\n\n// Standard iOS navigation transition\nconst SlideFromRightIOS = {\n  transitionSpec: IOSTransitionSpec,\n  screenInterpolator: StyleInterpolator.forHorizontal,\n  containerStyle: {\n    backgroundColor: '#eee',\n  },\n};\n\n// Standard iOS navigation transition for modals\nconst ModalSlideFromBottomIOS = {\n  transitionSpec: IOSTransitionSpec,\n  screenInterpolator: StyleInterpolator.forVertical,\n  containerStyle: {\n    backgroundColor: '#eee',\n  },\n};\n\n// Standard Android navigation transition when opening an Activity\nconst FadeInFromBottomAndroid = {\n  // See http://androidxref.com/7.1.1_r6/xref/frameworks/base/core/res/res/anim/activity_open_enter.xml\n  transitionSpec: {\n    duration: 350,\n    easing: Easing.out(Easing.poly(5)), // decelerate\n    timing: Animated.timing,\n  },\n  screenInterpolator: StyleInterpolator.forFadeFromBottomAndroid,\n};\n\n// Standard Android navigation transition when closing an Activity\nconst FadeOutToBottomAndroid = {\n  // See http://androidxref.com/7.1.1_r6/xref/frameworks/base/core/res/res/anim/activity_close_exit.xml\n  transitionSpec: {\n    duration: 150,\n    easing: Easing.in(Easing.linear), // accelerate\n    timing: Animated.timing,\n  },\n  screenInterpolator: StyleInterpolator.forFadeToBottomAndroid,\n};\n\nconst NoAnimation = {\n  transitionSpec: {\n    duration: 0,\n    timing: Animated.timing,\n  },\n  screenInterpolator: StyleInterpolator.forNoAnimation,\n  containerStyle: {\n    backgroundColor: '#eee',\n  },\n};\n\nfunction defaultTransitionConfig(\n  transitionProps: TransitionProps,\n  prevTransitionProps?: TransitionProps,\n  isModal?: boolean\n): TransitionConfig {\n  if (Platform.OS !== 'ios') {\n    // Use the default Android animation no matter if the screen is a modal.\n    // Android doesn't have full-screen modals like iOS does, it has dialogs.\n    if (\n      prevTransitionProps &&\n      transitionProps.index < prevTransitionProps.index\n    ) {\n      // Navigating back to the previous screen\n      return FadeOutToBottomAndroid;\n    }\n    return FadeInFromBottomAndroid;\n  }\n  // iOS and other platforms\n  if (isModal) {\n    return ModalSlideFromBottomIOS;\n  }\n  return SlideFromRightIOS;\n}\n\nfunction getTransitionConfig<T = {}>(\n  transitionConfigurer:\n    | undefined\n    | ((\n        transitionProps: TransitionProps,\n        prevTransitionProps?: TransitionProps,\n        isModal?: boolean\n      ) => T),\n  transitionProps: TransitionProps,\n  prevTransitionProps?: TransitionProps,\n  isModal?: boolean\n): TransitionConfig & T {\n  const defaultConfig = defaultTransitionConfig(\n    transitionProps,\n    prevTransitionProps,\n    isModal\n  );\n  if (transitionConfigurer) {\n    return {\n      ...defaultConfig,\n      ...transitionConfigurer(transitionProps, prevTransitionProps, isModal),\n    };\n  }\n\n  return defaultConfig as any;\n}\n\nexport default {\n  defaultTransitionConfig,\n  getTransitionConfig,\n  SlideFromRightIOS,\n  ModalSlideFromBottomIOS,\n  FadeInFromBottomAndroid,\n  FadeOutToBottomAndroid,\n  NoAnimation,\n};\n"]}