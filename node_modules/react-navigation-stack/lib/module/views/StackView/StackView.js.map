{"version":3,"sources":["StackView.tsx"],"names":["React","StackActions","StackViewLayout","Transitioner","TransitionConfigs","USE_NATIVE_DRIVER","DefaultNavigationConfig","mode","cardShadowEnabled","cardOverlayEnabled","StackView","configureTransition","transitionProps","prevTransitionProps","useNativeDriver","getTransitionConfig","props","navigationConfig","transitionConfig","transitionSpec","getShadowEnabled","hasOwnProperty","getCardOverlayEnabled","renderStackviewLayout","lastTransitionProps","screenProps","onGestureBegin","onGestureCanceled","onGestureEnd","handleTransitionEnd","transition","lastTransition","navigation","onTransitionEnd","transitionDestKey","scene","route","key","isCurrentKey","state","routes","index","isTransitioning","dispatch","completeTransition","toChildKey","descriptors","onTransitionStart","Component"],"mappings":"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","sourcesContent":["import * as React from 'react';\n\nimport { StackActions } from '@react-navigation/core';\nimport StackViewLayout from './StackViewLayout';\nimport Transitioner from '../Transitioner';\nimport TransitionConfigs from './StackViewTransitionConfigs';\nimport {\n  NavigationProp,\n  SceneDescriptor,\n  NavigationConfig,\n  TransitionProps,\n  Scene,\n} from '../../types';\n\ntype Props = {\n  navigation: NavigationProp;\n  descriptors: { [key: string]: SceneDescriptor };\n  navigationConfig: NavigationConfig;\n  onTransitionStart?: () => void;\n  onGestureBegin?: () => void;\n  onGestureCanceled?: () => void;\n  onGestureEnd?: () => void;\n  screenProps?: unknown;\n};\n\nconst USE_NATIVE_DRIVER = true;\n\n// NOTE(brentvatne): this was previously in defaultProps, but that is deceiving\n// because the entire object will be clobbered by navigationConfig that is\n// passed in.\nconst DefaultNavigationConfig = {\n  mode: 'card',\n  cardShadowEnabled: true,\n  cardOverlayEnabled: false,\n};\n\nclass StackView extends React.Component<Props> {\n  render() {\n    return (\n      <Transitioner\n        render={this.renderStackviewLayout}\n        configureTransition={this.configureTransition}\n        screenProps={this.props.screenProps}\n        navigation={this.props.navigation}\n        descriptors={this.props.descriptors}\n        onTransitionStart={\n          this.props.onTransitionStart ||\n          this.props.navigationConfig.onTransitionStart\n        }\n        onTransitionEnd={this.handleTransitionEnd}\n      />\n    );\n  }\n\n  componentDidMount() {\n    const { navigation } = this.props;\n    if (navigation.state.isTransitioning) {\n      navigation.dispatch(\n        StackActions.completeTransition({\n          key: navigation.state.key,\n        })\n      );\n    }\n  }\n\n  private configureTransition = (\n    transitionProps: TransitionProps,\n    prevTransitionProps?: TransitionProps\n  ) => {\n    return {\n      useNativeDriver: USE_NATIVE_DRIVER,\n      ...TransitionConfigs.getTransitionConfig(\n        this.props.navigationConfig.transitionConfig,\n        transitionProps,\n        prevTransitionProps,\n        this.props.navigationConfig.mode === 'modal'\n      ).transitionSpec,\n    };\n  };\n\n  private getShadowEnabled = () => {\n    const { navigationConfig } = this.props;\n    return navigationConfig &&\n      navigationConfig.hasOwnProperty('cardShadowEnabled')\n      ? navigationConfig.cardShadowEnabled\n      : DefaultNavigationConfig.cardShadowEnabled;\n  };\n\n  private getCardOverlayEnabled = () => {\n    const { navigationConfig } = this.props;\n    return navigationConfig &&\n      navigationConfig.hasOwnProperty('cardOverlayEnabled')\n      ? navigationConfig.cardOverlayEnabled\n      : DefaultNavigationConfig.cardOverlayEnabled;\n  };\n\n  private renderStackviewLayout = (\n    transitionProps: TransitionProps,\n    lastTransitionProps?: TransitionProps\n  ) => {\n    const { screenProps, navigationConfig } = this.props;\n    return (\n      <StackViewLayout\n        {...navigationConfig}\n        shadowEnabled={this.getShadowEnabled()}\n        cardOverlayEnabled={this.getCardOverlayEnabled()}\n        onGestureBegin={this.props.onGestureBegin}\n        onGestureCanceled={this.props.onGestureCanceled}\n        onGestureEnd={this.props.onGestureEnd}\n        screenProps={screenProps}\n        transitionProps={transitionProps}\n        lastTransitionProps={lastTransitionProps}\n      />\n    );\n  };\n\n  private handleTransitionEnd = (\n    transition: { scene: Scene; navigation: NavigationProp },\n    lastTransition?: { scene: Scene; navigation: NavigationProp }\n  ) => {\n    const {\n      navigationConfig,\n      navigation,\n      // @ts-ignore\n      onTransitionEnd = navigationConfig.onTransitionEnd,\n    } = this.props;\n    const transitionDestKey = transition.scene.route.key;\n    const isCurrentKey =\n      navigation.state.routes[navigation.state.index].key === transitionDestKey;\n    if (transition.navigation.state.isTransitioning && isCurrentKey) {\n      navigation.dispatch(\n        StackActions.completeTransition({\n          key: navigation.state.key,\n          toChildKey: transitionDestKey,\n        })\n      );\n    }\n    onTransitionEnd && onTransitionEnd(transition, lastTransition);\n  };\n}\n\nexport default StackView;\n"]}