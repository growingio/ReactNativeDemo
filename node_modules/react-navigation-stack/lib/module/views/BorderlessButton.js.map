{"version":3,"sources":["BorderlessButton.tsx"],"names":["React","Animated","Platform","BaseButton","AnimatedBaseButton","createAnimatedComponent","BorderlessButton","opacity","Value","handleActiveStateChange","active","OS","spring","stiffness","damping","mass","overshootClamping","restDisplacementThreshold","restSpeedThreshold","toValue","props","activeOpacity","useNativeDriver","start","onActiveStateChange","children","style","enabled","rest","Component","defaultProps","borderless"],"mappings":"+jBAAA,MAAO,GAAKA,CAAAA,KAAZ,KAAuB,OAAvB,CACA,OAASC,QAAT,CAAmBC,QAAnB,KAAmC,cAAnC,CACA,OAASC,UAAT,KAA2B,8BAA3B,CAEA,GAAMC,CAAAA,kBAAkB,CAAGH,QAAQ,CAACI,uBAAT,CAAiCF,UAAjC,CAA3B,C,GAMqBG,CAAAA,gB,saAMXC,O,CAAU,GAAIN,CAAAA,QAAQ,CAACO,KAAb,CAAmB,CAAnB,C,OAEVC,uB,CAA0B,SAACC,MAAD,CAAqB,CACrD,GAAIR,QAAQ,CAACS,EAAT,GAAgB,SAApB,CAA+B,CAC7BV,QAAQ,CAACW,MAAT,CAAgB,MAAKL,OAArB,CAA8B,CAC5BM,SAAS,CAAE,IADiB,CAE5BC,OAAO,CAAE,GAFmB,CAG5BC,IAAI,CAAE,CAHsB,CAI5BC,iBAAiB,CAAE,IAJS,CAK5BC,yBAAyB,CAAE,IALC,CAM5BC,kBAAkB,CAAE,IANQ,CAO5BC,OAAO,CAAET,MAAM,CAAG,MAAKU,KAAL,CAAWC,aAAd,CAA8B,CAPjB,CAQ5BC,eAAe,CAAE,IARW,CAA9B,EASGC,KATH,GAUD,CAED,MAAKH,KAAL,CAAWI,mBAAX,EAAkC,MAAKJ,KAAL,CAAWI,mBAAX,CAA+Bd,MAA/B,CAAlC,CACD,C,mFAEQ,iBACuC,KAAKU,KAD5C,CACCK,QADD,aACCA,QADD,CACWC,KADX,aACWA,KADX,CACkBC,OADlB,aACkBA,OADlB,CAC8BC,IAD9B,sEAGP,MACE,qBAAC,kBAAD,aACMA,IADN,EAEE,mBAAmB,CAAE,KAAKnB,uBAF5B,CAGE,KAAK,CAAE,CACLiB,KADK,CAELxB,QAAQ,CAACS,EAAT,GAAgB,KAAhB,EAAyBgB,OAAzB,EAAoC,CAAEpB,OAAO,CAAE,KAAKA,OAAhB,CAF/B,CAHT,kDAQGkB,QARH,CADF,CAYD,C,8BAxC2CzB,KAAK,CAAC6B,S,EAA/BvB,gB,CACZwB,Y,CAAe,CACpBT,aAAa,CAAE,GADK,CAEpBU,UAAU,CAAE,IAFQ,C,QADHzB,gB","sourcesContent":["import * as React from 'react';\nimport { Animated, Platform } from 'react-native';\nimport { BaseButton } from 'react-native-gesture-handler';\n\nconst AnimatedBaseButton = Animated.createAnimatedComponent(BaseButton);\n\ntype Props = React.ComponentProps<typeof BaseButton> & {\n  activeOpacity: number;\n};\n\nexport default class BorderlessButton extends React.Component<Props> {\n  static defaultProps = {\n    activeOpacity: 0.3,\n    borderless: true,\n  };\n\n  private opacity = new Animated.Value(1);\n\n  private handleActiveStateChange = (active: boolean) => {\n    if (Platform.OS !== 'android') {\n      Animated.spring(this.opacity, {\n        stiffness: 1000,\n        damping: 500,\n        mass: 3,\n        overshootClamping: true,\n        restDisplacementThreshold: 0.01,\n        restSpeedThreshold: 0.01,\n        toValue: active ? this.props.activeOpacity : 1,\n        useNativeDriver: true,\n      }).start();\n    }\n\n    this.props.onActiveStateChange && this.props.onActiveStateChange(active);\n  };\n\n  render() {\n    const { children, style, enabled, ...rest } = this.props;\n\n    return (\n      <AnimatedBaseButton\n        {...rest}\n        onActiveStateChange={this.handleActiveStateChange}\n        style={[\n          style,\n          Platform.OS === 'ios' && enabled && { opacity: this.opacity },\n        ]}\n      >\n        {children}\n      </AnimatedBaseButton>\n    );\n  }\n}\n"]}