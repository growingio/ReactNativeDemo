{"version":3,"sources":["TabBarIndicator.tsx"],"names":["max","Animated","min","multiply","TabBarIndicator","getTranslateX","position","routes","width","length","I18nManager","isRTL","props","navigationState","style","translateX","styles","indicator","transform","left","index","React","Component","StyleSheet","create","backgroundColor","bottom","right","height"],"mappings":"ktBAAA,oDACA,yCACA,sFAEA,0D,oGASQA,CAAAA,G,CAAuBC,8B,CAAvBD,G,CAAKE,G,CAAkBD,8B,CAAlBC,G,CAAKC,Q,CAAaF,8B,CAAbE,Q,IAEGC,CAAAA,e,sdAGXC,a,CAAgB,qBACtB,SAACC,QAAD,CAAkCC,MAAlC,CAAmDC,KAAnD,QACEL,CAAAA,QAAQ,CACNH,GAAG,CAACE,GAAG,CAACI,QAAD,CAAWC,MAAM,CAACE,MAAP,CAAgB,CAA3B,CAAJ,CAAmC,CAAnC,CADG,CAEND,KAAK,EAAIE,yBAAYC,KAAZ,CAAoB,CAAC,CAArB,CAAyB,CAA7B,CAFC,CADV,EADsB,C,+FAQf,iBAC6C,KAAKC,KADlD,CACCJ,KADD,aACCA,KADD,CACQF,QADR,aACQA,QADR,CACkBO,eADlB,aACkBA,eADlB,CACmCC,KADnC,aACmCA,KADnC,IAECP,CAAAA,MAFD,CAEYM,eAFZ,CAECN,MAFD,CAIP,GAAMQ,CAAAA,UAAU,CAAG,KAAKV,aAAL,CAAmBC,QAAnB,CAA6BC,MAA7B,CAAqCC,KAArC,CAAnB,CAEA,MACE,qBAAC,8BAAD,CAAU,IAAV,EACE,KAAK,CAAE,CACLQ,MAAM,CAACC,SADF,CAEL,CAAET,KAAK,CAAK,IAAMD,MAAM,CAACE,MAAlB,IAAP,CAFK,CAKLD,KAAK,CACD,CAAEU,SAAS,CAAE,CAAC,CAAEH,UAAU,CAAVA,UAAF,CAAD,CAAb,CADC,CAED,CAAEI,IAAI,CAAM,IAAMZ,MAAM,CAACE,MAAd,CAAwBI,eAAe,CAACO,KAA7C,IAAN,CAPC,CAQLN,KARK,CADT,iDADF,CAcD,C,6BA/B2DO,KAAK,CAACC,S,kCAkCpE,GAAMN,CAAAA,MAAM,CAAGO,wBAAWC,MAAX,CAAkB,CAC/BP,SAAS,CAAE,CACTQ,eAAe,CAAE,SADR,CAETnB,QAAQ,CAAE,UAFD,CAGTa,IAAI,CAAE,CAHG,CAITO,MAAM,CAAE,CAJC,CAKTC,KAAK,CAAE,CALE,CAMTC,MAAM,CAAE,CANC,CADoB,CAAlB,CAAf","sourcesContent":["import * as React from 'react';\nimport { StyleSheet, I18nManager, StyleProp, ViewStyle } from 'react-native';\nimport Animated from 'react-native-reanimated';\n\nimport memoize from './memoize';\nimport { Route, SceneRendererProps, NavigationState } from './types';\n\nexport type Props<T extends Route> = SceneRendererProps & {\n  navigationState: NavigationState<T>;\n  width: number;\n  style?: StyleProp<ViewStyle>;\n};\n\nconst { max, min, multiply } = Animated;\n\nexport default class TabBarIndicator<T extends Route> extends React.Component<\n  Props<T>\n> {\n  private getTranslateX = memoize(\n    (position: Animated.Node<number>, routes: Route[], width: number) =>\n      multiply(\n        max(min(position, routes.length - 1), 0),\n        width * (I18nManager.isRTL ? -1 : 1)\n      )\n  );\n\n  render() {\n    const { width, position, navigationState, style } = this.props;\n    const { routes } = navigationState;\n\n    const translateX = this.getTranslateX(position, routes, width);\n\n    return (\n      <Animated.View\n        style={[\n          styles.indicator,\n          { width: `${100 / routes.length}%` },\n          // If layout is not available, use `left` property for positioning the indicator\n          // This avoids rendering delay until we are able to calculate translateX\n          width\n            ? { transform: [{ translateX }] as any }\n            : { left: `${(100 / routes.length) * navigationState.index}%` },\n          style,\n        ]}\n      />\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  indicator: {\n    backgroundColor: '#ffeb3b',\n    position: 'absolute',\n    left: 0,\n    bottom: 0,\n    right: 0,\n    height: 2,\n  },\n});\n"]}