{"version":3,"sources":["TabView.tsx"],"names":["TabView","state","layout","width","height","props","initialLayout","jumpToIndex","index","navigationState","onIndexChange","handleLayout","e","nativeEvent","setState","positionListener","position","onSwipeStart","onSwipeEnd","lazy","lazyPreloadDistance","removeClippedSubviews","keyboardDismissMode","swipeEnabled","swipeDistanceThreshold","swipeVelocityThreshold","timingConfig","springConfig","tabBarPosition","renderTabBar","renderScene","renderLazyPlaceholder","sceneContainerStyle","style","gestureHandlerProps","styles","pager","render","addListener","removeListener","jumpTo","sceneRendererProps","Animated","set","routes","map","route","i","key","loading","React","Component","defaultProps","StyleSheet","create","flex","overflow"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  StyleSheet,\n  View,\n  StyleProp,\n  ViewStyle,\n  LayoutChangeEvent,\n} from 'react-native';\nimport { PanGestureHandler } from 'react-native-gesture-handler';\nimport Animated from 'react-native-reanimated';\nimport TabBar, { Props as TabBarProps } from './TabBar';\nimport Pager from './Pager';\nimport SceneView from './SceneView';\nimport {\n  Layout,\n  NavigationState,\n  Route,\n  SceneRendererProps,\n  PagerCommonProps,\n} from './types';\n\ntype Props<T extends Route> = PagerCommonProps & {\n  position?: Animated.Value<number>;\n  onIndexChange: (index: number) => void;\n  navigationState: NavigationState<T>;\n  renderScene: (\n    props: SceneRendererProps & {\n      route: T;\n    }\n  ) => React.ReactNode;\n  renderLazyPlaceholder: (props: { route: T }) => React.ReactNode;\n  renderTabBar: (\n    props: SceneRendererProps & {\n      navigationState: NavigationState<T>;\n    }\n  ) => React.ReactNode;\n  tabBarPosition: 'top' | 'bottom';\n  initialLayout?: { width?: number; height?: number };\n  lazy: boolean;\n  lazyPreloadDistance: number;\n  removeClippedSubviews?: boolean;\n  sceneContainerStyle?: StyleProp<ViewStyle>;\n  style?: StyleProp<ViewStyle>;\n  gestureHandlerProps: React.ComponentProps<typeof PanGestureHandler>;\n};\n\ntype State = {\n  layout: Layout;\n};\n\nexport default class TabView<T extends Route> extends React.Component<\n  Props<T>,\n  State\n> {\n  static defaultProps = {\n    tabBarPosition: 'top',\n    renderTabBar: <P extends Route>(props: TabBarProps<P>) => (\n      <TabBar {...props} />\n    ),\n    renderLazyPlaceholder: () => null,\n    keyboardDismissMode: 'on-drag',\n    swipeEnabled: true,\n    lazy: false,\n    lazyPreloadDistance: 0,\n    removeClippedSubviews: false,\n    springConfig: {},\n    timingConfig: {},\n    gestureHandlerProps: {},\n  };\n\n  state = {\n    layout: { width: 0, height: 0, ...this.props.initialLayout },\n  };\n\n  private jumpToIndex = (index: number) => {\n    if (index !== this.props.navigationState.index) {\n      this.props.onIndexChange(index);\n    }\n  };\n\n  private handleLayout = (e: LayoutChangeEvent) => {\n    const { height, width } = e.nativeEvent.layout;\n\n    if (\n      this.state.layout.width === width &&\n      this.state.layout.height === height\n    ) {\n      return;\n    }\n\n    this.setState({\n      layout: {\n        height,\n        width,\n      },\n    });\n  };\n\n  render() {\n    const {\n      position: positionListener,\n      onSwipeStart,\n      onSwipeEnd,\n      navigationState,\n      lazy,\n      lazyPreloadDistance,\n      removeClippedSubviews,\n      keyboardDismissMode,\n      swipeEnabled,\n      swipeDistanceThreshold,\n      swipeVelocityThreshold,\n      timingConfig,\n      springConfig,\n      tabBarPosition,\n      renderTabBar,\n      renderScene,\n      renderLazyPlaceholder,\n      sceneContainerStyle,\n      style,\n      gestureHandlerProps,\n    } = this.props;\n    const { layout } = this.state;\n\n    return (\n      <View onLayout={this.handleLayout} style={[styles.pager, style]}>\n        <Pager\n          navigationState={navigationState}\n          layout={layout}\n          keyboardDismissMode={keyboardDismissMode}\n          swipeEnabled={swipeEnabled}\n          swipeDistanceThreshold={swipeDistanceThreshold}\n          swipeVelocityThreshold={swipeVelocityThreshold}\n          timingConfig={timingConfig}\n          springConfig={springConfig}\n          onSwipeStart={onSwipeStart}\n          onSwipeEnd={onSwipeEnd}\n          onIndexChange={this.jumpToIndex}\n          removeClippedSubviews={removeClippedSubviews}\n          gestureHandlerProps={gestureHandlerProps}\n        >\n          {({ position, render, addListener, removeListener, jumpTo }) => {\n            // All of the props here must not change between re-renders\n            // This is crucial to optimizing the routes with PureComponent\n            const sceneRendererProps = {\n              position,\n              layout,\n              jumpTo,\n            };\n\n            return (\n              <React.Fragment>\n                {positionListener ? (\n                  <Animated.Code\n                    exec={Animated.set(positionListener, position)}\n                  />\n                ) : null}\n                {tabBarPosition === 'top' &&\n                  renderTabBar({\n                    ...sceneRendererProps,\n                    navigationState,\n                  })}\n                {render(\n                  navigationState.routes.map((route, i) => {\n                    return (\n                      <SceneView\n                        {...sceneRendererProps}\n                        addListener={addListener}\n                        removeListener={removeListener}\n                        key={route.key}\n                        index={i}\n                        lazy={lazy}\n                        lazyPreloadDistance={lazyPreloadDistance}\n                        navigationState={navigationState}\n                        style={sceneContainerStyle}\n                      >\n                        {({ loading }) =>\n                          loading\n                            ? renderLazyPlaceholder({ route })\n                            : renderScene({\n                                ...sceneRendererProps,\n                                route,\n                              })\n                        }\n                      </SceneView>\n                    );\n                  })\n                )}\n                {tabBarPosition === 'bottom' &&\n                  renderTabBar({\n                    ...sceneRendererProps,\n                    navigationState,\n                  })}\n              </React.Fragment>\n            );\n          }}\n        </Pager>\n      </View>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  pager: {\n    flex: 1,\n    overflow: 'hidden',\n  },\n});\n"]}