{"version":3,"sources":["TabBarIndicator.tsx"],"names":["React","StyleSheet","I18nManager","Animated","memoize","max","min","multiply","TabBarIndicator","getTranslateX","position","routes","width","length","isRTL","props","navigationState","style","translateX","styles","indicator","transform","left","index","Component","create","backgroundColor","bottom","right","height"],"mappings":"obAAA,MAAO,GAAKA,CAAAA,KAAZ,KAAuB,OAAvB,CACA,OAASC,UAAT,CAAqBC,WAArB,KAA8D,cAA9D,CACA,MAAOC,CAAAA,QAAP,KAAqB,yBAArB,CAEA,MAAOC,CAAAA,OAAP,KAAoB,WAApB,C,GASQC,CAAAA,G,CAAuBF,Q,CAAvBE,G,CAAKC,G,CAAkBH,Q,CAAlBG,G,CAAKC,Q,CAAaJ,Q,CAAbI,Q,IAEGC,CAAAA,e,kaAGXC,a,CAAgBL,OAAO,CAC7B,SAACM,QAAD,CAAkCC,MAAlC,CAAmDC,KAAnD,QACEL,CAAAA,QAAQ,CACNF,GAAG,CAACC,GAAG,CAACI,QAAD,CAAWC,MAAM,CAACE,MAAP,CAAgB,CAA3B,CAAJ,CAAmC,CAAnC,CADG,CAEND,KAAK,EAAIV,WAAW,CAACY,KAAZ,CAAoB,CAAC,CAArB,CAAyB,CAA7B,CAFC,CADV,EAD6B,C,kFAQtB,iBAC6C,KAAKC,KADlD,CACCH,KADD,aACCA,KADD,CACQF,QADR,aACQA,QADR,CACkBM,eADlB,aACkBA,eADlB,CACmCC,KADnC,aACmCA,KADnC,IAECN,CAAAA,MAFD,CAEYK,eAFZ,CAECL,MAFD,CAIP,GAAMO,CAAAA,UAAU,CAAG,KAAKT,aAAL,CAAmBC,QAAnB,CAA6BC,MAA7B,CAAqCC,KAArC,CAAnB,CAEA,MACE,qBAAC,QAAD,CAAU,IAAV,EACE,KAAK,CAAE,CACLO,MAAM,CAACC,SADF,CAEL,CAAER,KAAK,CAAK,IAAMD,MAAM,CAACE,MAAlB,IAAP,CAFK,CAKLD,KAAK,CACD,CAAES,SAAS,CAAE,CAAC,CAAEH,UAAU,CAAVA,UAAF,CAAD,CAAb,CADC,CAED,CAAEI,IAAI,CAAM,IAAMX,MAAM,CAACE,MAAd,CAAwBG,eAAe,CAACO,KAA7C,IAAN,CAPC,CAQLN,KARK,CADT,iDADF,CAcD,C,6BA/B2DjB,KAAK,CAACwB,S,SAA/ChB,e,aAkCrB,GAAMW,CAAAA,MAAM,CAAGlB,UAAU,CAACwB,MAAX,CAAkB,CAC/BL,SAAS,CAAE,CACTM,eAAe,CAAE,SADR,CAEThB,QAAQ,CAAE,UAFD,CAGTY,IAAI,CAAE,CAHG,CAITK,MAAM,CAAE,CAJC,CAKTC,KAAK,CAAE,CALE,CAMTC,MAAM,CAAE,CANC,CADoB,CAAlB,CAAf","sourcesContent":["import * as React from 'react';\nimport { StyleSheet, I18nManager, StyleProp, ViewStyle } from 'react-native';\nimport Animated from 'react-native-reanimated';\n\nimport memoize from './memoize';\nimport { Route, SceneRendererProps, NavigationState } from './types';\n\nexport type Props<T extends Route> = SceneRendererProps & {\n  navigationState: NavigationState<T>;\n  width: number;\n  style?: StyleProp<ViewStyle>;\n};\n\nconst { max, min, multiply } = Animated;\n\nexport default class TabBarIndicator<T extends Route> extends React.Component<\n  Props<T>\n> {\n  private getTranslateX = memoize(\n    (position: Animated.Node<number>, routes: Route[], width: number) =>\n      multiply(\n        max(min(position, routes.length - 1), 0),\n        width * (I18nManager.isRTL ? -1 : 1)\n      )\n  );\n\n  render() {\n    const { width, position, navigationState, style } = this.props;\n    const { routes } = navigationState;\n\n    const translateX = this.getTranslateX(position, routes, width);\n\n    return (\n      <Animated.View\n        style={[\n          styles.indicator,\n          { width: `${100 / routes.length}%` },\n          // If layout is not available, use `left` property for positioning the indicator\n          // This avoids rendering delay until we are able to calculate translateX\n          width\n            ? { transform: [{ translateX }] as any }\n            : { left: `${(100 / routes.length) * navigationState.index}%` },\n          style,\n        ]}\n      />\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  indicator: {\n    backgroundColor: '#ffeb3b',\n    position: 'absolute',\n    left: 0,\n    bottom: 0,\n    right: 0,\n    height: 2,\n  },\n});\n"]}