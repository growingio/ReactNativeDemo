{"version":3,"sources":["TouchableItem.tsx"],"names":["React","TouchableNativeFeedback","TouchableOpacity","Platform","View","LOLLIPOP","TouchableItem","props","style","pressOpacity","pressColor","borderless","children","rest","OS","Version","Ripple","Children","only","Component","defaultProps"],"mappings":"4jBAAA,MAAO,GAAKA,CAAAA,KAAZ,KAAuB,OAAvB,CACA,OACEC,uBADF,CAEEC,gBAFF,CAGEC,QAHF,CAIEC,IAJF,KAQO,cARP,CAqBA,GAAMC,CAAAA,QAAQ,CAAG,EAAjB,C,GAEqBC,CAAAA,a,kSAKV,iBAQH,KAAKC,KARF,CAELC,KAFK,aAELA,KAFK,CAGLC,YAHK,aAGLA,YAHK,CAILC,UAJK,aAILA,UAJK,CAKLC,UALK,aAKLA,UALK,CAMLC,QANK,aAMLA,QANK,CAOFC,IAPE,qGAUP,GAAIV,QAAQ,CAACW,EAAT,GAAgB,SAAhB,EAA6BX,QAAQ,CAACY,OAAT,EAAoBV,QAArD,CAA+D,CAC7D,MACE,qBAAC,uBAAD,aACMQ,IADN,EAEE,UAAU,CAAEZ,uBAAuB,CAACe,MAAxB,CAA+BN,UAA/B,CAA2CC,UAA3C,CAFd,kDAIE,oBAAC,IAAD,EAAM,KAAK,CAAEH,KAAb,iDAAqBR,KAAK,CAACiB,QAAN,CAAeC,IAAf,CAAoBN,QAApB,CAArB,CAJF,CADF,CAQD,CATD,IASO,CACL,MACE,qBAAC,gBAAD,aAAsBC,IAAtB,EAA4B,KAAK,CAAEL,KAAnC,CAA0C,aAAa,CAAEC,YAAzD,kDACGG,QADH,CADF,CAKD,CACF,C,2BA/BwCZ,KAAK,CAACmB,S,EAA5Bb,a,CACZc,Y,CAAe,CACpBV,UAAU,CAAE,yBADQ,C,QADHJ,a","sourcesContent":["import * as React from 'react';\nimport {\n  TouchableNativeFeedback,\n  TouchableOpacity,\n  Platform,\n  View,\n  StyleProp,\n  ViewStyle,\n  ViewProps,\n} from 'react-native';\n\ntype Props = ViewProps & {\n  onPress: () => void;\n  onLongPress?: () => void;\n  delayPressIn?: number;\n  borderless?: boolean;\n  pressColor: string;\n  pressOpacity?: number;\n  children?: React.ReactNode;\n  style?: StyleProp<ViewStyle>;\n};\n\nconst LOLLIPOP = 21;\n\nexport default class TouchableItem extends React.Component<Props> {\n  static defaultProps = {\n    pressColor: 'rgba(255, 255, 255, .4)',\n  };\n\n  render() {\n    const {\n      style,\n      pressOpacity,\n      pressColor,\n      borderless,\n      children,\n      ...rest\n    } = this.props;\n\n    if (Platform.OS === 'android' && Platform.Version >= LOLLIPOP) {\n      return (\n        <TouchableNativeFeedback\n          {...rest}\n          background={TouchableNativeFeedback.Ripple(pressColor, borderless)}\n        >\n          <View style={style}>{React.Children.only(children)}</View>\n        </TouchableNativeFeedback>\n      );\n    } else {\n      return (\n        <TouchableOpacity {...rest} style={style} activeOpacity={pressOpacity}>\n          {children}\n        </TouchableOpacity>\n      );\n    }\n  }\n}\n"]}