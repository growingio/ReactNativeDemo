{"version":3,"sources":["NavigationEvents.js"],"names":["EventNameToPropName","willFocus","didFocus","willBlur","didBlur","EventNames","Object","keys","NavigationEvents","getPropListener","eventName","props","subscriptions","forEach","navigation","addListener","propListener","remove","React","Component"],"mappings":"6nBAAA,oDACA,wEAEA,GAAMA,CAAAA,mBAAmB,CAAG,CAC1BC,SAAS,CAAE,aADe,CAE1BC,QAAQ,CAAE,YAFgB,CAG1BC,QAAQ,CAAE,YAHgB,CAI1BC,OAAO,CAAE,WAJiB,CAA5B,CAOA,GAAMC,CAAAA,UAAU,CAAGC,MAAM,CAACC,IAAP,CAAYP,mBAAZ,CAAnB,C,GAEMQ,CAAAA,gB,0dACJC,e,CAAkB,SAAAC,SAAS,QAAI,OAAKC,KAAL,CAAWX,mBAAmB,CAACU,SAAD,CAA9B,CAAJ,E,sHAEP,iBAClB,KAAKE,aAAL,CAAqB,EAArB,CAKAP,UAAU,CAACQ,OAAX,CAAmB,SAAAH,SAAS,CAAI,CAC9B,MAAI,CAACE,aAAL,CAAmBF,SAAnB,EAAgC,MAAI,CAACC,KAAL,CAAWG,UAAX,CAAsBC,WAAtB,CAC9BL,SAD8B,CAE9B,UAAa,CACX,GAAMM,CAAAA,YAAY,CAAG,MAAI,CAACP,eAAL,CAAqBC,SAArB,CAArB,CACA,MAAOM,CAAAA,YAAY,EAAIA,YAAY,MAAZ,kBAAvB,CACD,CAL6B,CAAhC,CAOD,CARD,EASD,C,mEAEsB,iBACrBX,UAAU,CAACQ,OAAX,CAAmB,SAAAH,SAAS,CAAI,CAC9B,MAAI,CAACE,aAAL,CAAmBF,SAAnB,EAA8BO,MAA9B,GACD,CAFD,EAGD,C,uCAEQ,CACP,MAAO,KAAP,CACD,C,8BA5B4BC,eAAMC,S,eA+BtB,4BAAeX,gBAAf,C","sourcesContent":["import React from 'react';\nimport withNavigation from './withNavigation';\n\nconst EventNameToPropName = {\n  willFocus: 'onWillFocus',\n  didFocus: 'onDidFocus',\n  willBlur: 'onWillBlur',\n  didBlur: 'onDidBlur',\n};\n\nconst EventNames = Object.keys(EventNameToPropName);\n\nclass NavigationEvents extends React.Component {\n  getPropListener = eventName => this.props[EventNameToPropName[eventName]];\n\n  componentDidMount() {\n    this.subscriptions = {};\n\n    // We register all navigation listeners on mount to ensure listener stability across re-render\n    // A former implementation was replacing (removing/adding) listeners on all update (if prop provided)\n    // but there were issues (see https://github.com/react-navigation/react-navigation/issues/5058)\n    EventNames.forEach(eventName => {\n      this.subscriptions[eventName] = this.props.navigation.addListener(\n        eventName,\n        (...args) => {\n          const propListener = this.getPropListener(eventName);\n          return propListener && propListener(...args);\n        }\n      );\n    });\n  }\n\n  componentWillUnmount() {\n    EventNames.forEach(eventName => {\n      this.subscriptions[eventName].remove();\n    });\n  }\n\n  render() {\n    return null;\n  }\n}\n\nexport default withNavigation(NavigationEvents);\n"]}