{"version":3,"sources":["StateUtils.js"],"names":["StateUtils","get","state","key","routes","find","route","indexOf","findIndex","has","some","push","slice","index","length","pop","jumpToIndex","jumpTo","back","forward","replaceAndPrune","replaced","replaceAtIndex","replaceAt","preserveIndex","nextIndex","nextState","reset","Array","isArray","undefined","compare","ii","every"],"mappings":"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","sourcesContent":["import invariant from './utils/invariant';\n\n/**\n * Utilities to perform atomic operation with navigate state and routes.\n *\n * ```javascript\n * const state1 = {key: 'screen 1'};\n * const state2 = NavigationStateUtils.push(state1, {key: 'screen 2'});\n * ```\n */\nconst StateUtils = {\n  /**\n   * Gets a route by key. If the route isn't found, returns `null`.\n   */\n  get(state, key) {\n    return state.routes.find(route => route.key === key) || null;\n  },\n\n  /**\n   * Returns the first index at which a given route's key can be found in the\n   * routes of the navigation state, or -1 if it is not present.\n   */\n  indexOf(state, key) {\n    return state.routes.findIndex(route => route.key === key);\n  },\n\n  /**\n   * Returns `true` at which a given route's key can be found in the\n   * routes of the navigation state.\n   */\n  has(state, key) {\n    return !!state.routes.some(route => route.key === key);\n  },\n\n  /**\n   * Pushes a new route into the navigation state.\n   * Note that this moves the index to the position to where the last route in the\n   * stack is at.\n   */\n  push(state, route) {\n    invariant(\n      StateUtils.indexOf(state, route.key) === -1,\n      'should not push route with duplicated key %s',\n      route.key\n    );\n\n    const routes = state.routes.slice();\n    routes.push(route);\n\n    return {\n      ...state,\n      index: routes.length - 1,\n      routes,\n    };\n  },\n\n  /**\n   * Pops out a route from the navigation state.\n   * Note that this moves the index to the position to where the last route in the\n   * stack is at.\n   */\n  pop(state) {\n    if (state.index <= 0) {\n      // [Note]: Over-popping does not throw error. Instead, it will be no-op.\n      return state;\n    }\n    const routes = state.routes.slice(0, -1);\n    return {\n      ...state,\n      index: routes.length - 1,\n      routes,\n    };\n  },\n\n  /**\n   * Sets the focused route of the navigation state by index.\n   */\n  jumpToIndex(state, index) {\n    if (index === state.index) {\n      return state;\n    }\n\n    invariant(!!state.routes[index], 'invalid index %s to jump to', index);\n\n    return {\n      ...state,\n      index,\n    };\n  },\n\n  /**\n   * Sets the focused route of the navigation state by key.\n   */\n  jumpTo(state, key) {\n    const index = StateUtils.indexOf(state, key);\n    return StateUtils.jumpToIndex(state, index);\n  },\n\n  /**\n   * Sets the focused route to the previous route.\n   */\n  back(state) {\n    const index = state.index - 1;\n    const route = state.routes[index];\n    return route ? StateUtils.jumpToIndex(state, index) : state;\n  },\n\n  /**\n   * Sets the focused route to the next route.\n   */\n  forward(state) {\n    const index = state.index + 1;\n    const route = state.routes[index];\n    return route ? StateUtils.jumpToIndex(state, index) : state;\n  },\n\n  /**\n   * Replace a route by a key.\n   * Note that this moves the index to the position to where the new route in the\n   * stack is at and updates the routes array accordingly.\n   */\n  replaceAndPrune(state, key, route) {\n    const index = StateUtils.indexOf(state, key);\n    const replaced = StateUtils.replaceAtIndex(state, index, route);\n\n    return {\n      ...replaced,\n      routes: replaced.routes.slice(0, index + 1),\n    };\n  },\n\n  /**\n   * Replace a route by a key.\n   * Note that this moves the index to the position to where the new route in the\n   * stack is at. Does not prune the routes.\n   * If preserveIndex is true then replacing the route does not cause the index\n   * to change to the index of that route.\n   */\n  replaceAt(state, key, route, preserveIndex = false) {\n    const index = StateUtils.indexOf(state, key);\n    const nextIndex = preserveIndex ? state.index : index;\n    let nextState = StateUtils.replaceAtIndex(state, index, route);\n    nextState.index = nextIndex;\n    return nextState;\n  },\n\n  /**\n   * Replace a route by a index.\n   * Note that this moves the index to the position to where the new route in the\n   * stack is at.\n   */\n  replaceAtIndex(state, index, route) {\n    invariant(\n      !!state.routes[index],\n      'invalid index %s for replacing route %s',\n      index,\n      route.key\n    );\n\n    if (state.routes[index] === route && index === state.index) {\n      return state;\n    }\n\n    const routes = state.routes.slice();\n    routes[index] = route;\n\n    return {\n      ...state,\n      index,\n      routes,\n    };\n  },\n\n  /**\n   * Resets all routes.\n   * Note that this moves the index to the position to where the last route in the\n   * stack is at if the param `index` isn't provided.\n   */\n  reset(state, routes, index) {\n    invariant(\n      routes.length && Array.isArray(routes),\n      'invalid routes to replace'\n    );\n\n    const nextIndex = index === undefined ? routes.length - 1 : index;\n\n    if (state.routes.length === routes.length && state.index === nextIndex) {\n      const compare = (route, ii) => routes[ii] === route;\n      if (state.routes.every(compare)) {\n        return state;\n      }\n    }\n\n    invariant(!!routes[nextIndex], 'invalid index %s to reset', nextIndex);\n\n    return {\n      ...state,\n      index: nextIndex,\n      routes,\n    };\n  },\n};\n\nexport default StateUtils;\n"]}