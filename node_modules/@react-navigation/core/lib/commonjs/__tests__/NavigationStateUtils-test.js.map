{"version":3,"sources":["NavigationStateUtils-test.js"],"names":["routeName","describe","it","state","index","routes","key","isTransitioning","expect","NavigationStateUtils","get","toEqual","toBe","indexOf","has","newState","push","toThrow","pop","jumpToIndex","jumpTo","back","forward","replaceAt","replaceAtIndex","reset"],"mappings":"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","sourcesContent":["import NavigationStateUtils from '../StateUtils';\n\nconst routeName = 'Anything';\n\ndescribe('StateUtils', () => {\n  // Getters\n  it('gets route', () => {\n    const state = {\n      index: 0,\n      routes: [{ key: 'a', routeName }],\n      isTransitioning: false,\n    };\n    expect(NavigationStateUtils.get(state, 'a')).toEqual({\n      key: 'a',\n      routeName,\n    });\n    expect(NavigationStateUtils.get(state, 'b')).toBe(null);\n  });\n\n  it('gets route index', () => {\n    const state = {\n      index: 1,\n      routes: [{ key: 'a', routeName }, { key: 'b', routeName }],\n      isTransitioning: false,\n    };\n    expect(NavigationStateUtils.indexOf(state, 'a')).toBe(0);\n    expect(NavigationStateUtils.indexOf(state, 'b')).toBe(1);\n    expect(NavigationStateUtils.indexOf(state, 'c')).toBe(-1);\n  });\n\n  it('has a route', () => {\n    const state = {\n      index: 0,\n      routes: [{ key: 'a', routeName }, { key: 'b', routeName }],\n      isTransitioning: false,\n    };\n    expect(NavigationStateUtils.has(state, 'b')).toBe(true);\n    expect(NavigationStateUtils.has(state, 'c')).toBe(false);\n  });\n\n  // Push\n  it('pushes a route', () => {\n    const state = {\n      index: 0,\n      routes: [{ key: 'a', routeName }],\n      isTransitioning: false,\n    };\n    const newState = {\n      index: 1,\n      isTransitioning: false,\n      routes: [{ key: 'a', routeName }, { key: 'b', routeName }],\n    };\n    expect(NavigationStateUtils.push(state, { key: 'b', routeName })).toEqual(\n      newState\n    );\n  });\n\n  it('does not push duplicated route', () => {\n    const state = {\n      index: 0,\n      routes: [{ key: 'a', routeName }],\n      isTransitioning: false,\n    };\n    expect(() =>\n      NavigationStateUtils.push(state, { key: 'a', routeName })\n    ).toThrow('should not push route with duplicated key a');\n  });\n\n  // Pop\n  it('pops route', () => {\n    const state = {\n      index: 1,\n      routes: [{ key: 'a', routeName }, { key: 'b', routeName }],\n      isTransitioning: false,\n    };\n    const newState = {\n      index: 0,\n      routes: [{ key: 'a', routeName }],\n      isTransitioning: false,\n    };\n    expect(NavigationStateUtils.pop(state)).toEqual(newState);\n  });\n\n  it('does not pop route if not applicable', () => {\n    const state = {\n      index: 0,\n      routes: [{ key: 'a', routeName }],\n      isTransitioning: false,\n    };\n    expect(NavigationStateUtils.pop(state)).toBe(state);\n  });\n\n  // Jump\n  it('jumps to new index', () => {\n    const state = {\n      index: 0,\n      routes: [{ key: 'a', routeName }, { key: 'b', routeName }],\n      isTransitioning: false,\n    };\n    const newState = {\n      index: 1,\n      routes: [{ key: 'a', routeName }, { key: 'b', routeName }],\n      isTransitioning: false,\n    };\n    expect(NavigationStateUtils.jumpToIndex(state, 0)).toBe(state);\n    expect(NavigationStateUtils.jumpToIndex(state, 1)).toEqual(newState);\n  });\n\n  it('throws if jumps to invalid index', () => {\n    const state = {\n      index: 0,\n      routes: [{ key: 'a', routeName }, { key: 'b', routeName }],\n      isTransitioning: false,\n    };\n    expect(() => NavigationStateUtils.jumpToIndex(state, 2)).toThrow(\n      'invalid index 2 to jump to'\n    );\n  });\n\n  it('jumps to new key', () => {\n    const state = {\n      index: 0,\n      routes: [{ key: 'a', routeName }, { key: 'b', routeName }],\n      isTransitioning: false,\n    };\n    const newState = {\n      index: 1,\n      routes: [{ key: 'a', routeName }, { key: 'b', routeName }],\n      isTransitioning: false,\n    };\n    expect(NavigationStateUtils.jumpTo(state, 'a')).toBe(state);\n    expect(NavigationStateUtils.jumpTo(state, 'b')).toEqual(newState);\n  });\n\n  it('throws if jumps to invalid key', () => {\n    const state = {\n      index: 0,\n      routes: [{ key: 'a', routeName }, { key: 'b', routeName }],\n      isTransitioning: false,\n    };\n    expect(() => NavigationStateUtils.jumpTo(state, 'c')).toThrow(\n      'invalid index -1 to jump to'\n    );\n  });\n\n  it('move backwards', () => {\n    const state = {\n      index: 1,\n      routes: [{ key: 'a', routeName }, { key: 'b', routeName }],\n      isTransitioning: false,\n    };\n    const newState = {\n      index: 0,\n      routes: [{ key: 'a', routeName }, { key: 'b', routeName }],\n      isTransitioning: false,\n    };\n    expect(NavigationStateUtils.back(state)).toEqual(newState);\n    expect(NavigationStateUtils.back(newState)).toBe(newState);\n  });\n\n  it('move forwards', () => {\n    const state = {\n      index: 0,\n      routes: [{ key: 'a', routeName }, { key: 'b', routeName }],\n      isTransitioning: false,\n    };\n    const newState = {\n      index: 1,\n      routes: [{ key: 'a', routeName }, { key: 'b', routeName }],\n      isTransitioning: false,\n    };\n    expect(NavigationStateUtils.forward(state)).toEqual(newState);\n    expect(NavigationStateUtils.forward(newState)).toBe(newState);\n  });\n\n  // Replace\n  it('Replaces by key', () => {\n    const state = {\n      index: 0,\n      routes: [{ key: 'a', routeName }, { key: 'b', routeName }],\n      isTransitioning: false,\n    };\n    const newState = {\n      index: 1,\n      routes: [{ key: 'a', routeName }, { key: 'c', routeName }],\n      isTransitioning: false,\n    };\n    expect(\n      NavigationStateUtils.replaceAt(state, 'b', { key: 'c', routeName })\n    ).toEqual(newState);\n  });\n\n  it('Replaces by index', () => {\n    const state = {\n      index: 0,\n      routes: [{ key: 'a', routeName }, { key: 'b', routeName }],\n      isTransitioning: false,\n    };\n    const newState = {\n      index: 1,\n      routes: [{ key: 'a', routeName }, { key: 'c', routeName }],\n      isTransitioning: false,\n    };\n    expect(\n      NavigationStateUtils.replaceAtIndex(state, 1, { key: 'c', routeName })\n    ).toEqual(newState);\n  });\n\n  it('Returns the state with updated index if route is unchanged but index changes', () => {\n    const state = {\n      index: 0,\n      routes: [{ key: 'a', routeName }, { key: 'b', routeName }],\n      isTransitioning: false,\n    };\n    expect(\n      NavigationStateUtils.replaceAtIndex(state, 1, state.routes[1])\n    ).toEqual({ ...state, index: 1 });\n  });\n\n  // Reset\n  it('Resets routes', () => {\n    const state = {\n      index: 0,\n      routes: [{ key: 'a', routeName }, { key: 'b', routeName }],\n      isTransitioning: false,\n    };\n    const newState = {\n      index: 1,\n      routes: [{ key: 'x', routeName }, { key: 'y', routeName }],\n      isTransitioning: false,\n    };\n    expect(\n      NavigationStateUtils.reset(state, [\n        { key: 'x', routeName },\n        { key: 'y', routeName },\n      ])\n    ).toEqual(newState);\n\n    expect(() => {\n      NavigationStateUtils.reset(state, []);\n    }).toThrow('invalid routes to replace');\n  });\n\n  it('Resets routes with index', () => {\n    const state = {\n      index: 0,\n      routes: [{ key: 'a', routeName }, { key: 'b', routeName }],\n      isTransitioning: false,\n    };\n    const newState = {\n      index: 0,\n      routes: [{ key: 'x', routeName }, { key: 'y', routeName }],\n      isTransitioning: false,\n    };\n    expect(\n      NavigationStateUtils.reset(\n        state,\n        [{ key: 'x', routeName }, { key: 'y', routeName }],\n        0\n      )\n    ).toEqual(newState);\n\n    expect(() => {\n      NavigationStateUtils.reset(\n        state,\n        [{ key: 'x', routeName }, { key: 'y', routeName }],\n        100\n      );\n    }).toThrow('invalid index 100 to reset');\n  });\n});\n"]}