{"version":3,"sources":["createSwitchnavigator-test.js"],"names":["jest","mock","require","getActiveRouteName","state","routes","index","routeName","createScreen","nextRouteName","props","String","navigation","isFirstRouteInParent","navigate","goBack","it","SwitchNavigator","First","Second","Third","initialRouteName","App","queryByText","getByTestId","expect","toBeNull","not","fireEvent","press","navigationRef","React","createRef","current","nav","toBe","backBehavior","children"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { Text, View, TouchableOpacity } from 'react-native';\nimport { render, fireEvent } from 'react-native-testing-library';\nimport { createAppContainer } from '@react-navigation/native';\nimport createSwitchNavigator from '../createSwitchNavigator';\n\njest.mock('@react-navigation/core', () => require('../../index'));\n\nconst getActiveRouteName = state => state.routes[state.index].routeName;\nconst createScreen = (routeName, nextRouteName) => props => (\n  <View>\n    <Text testID=\"title\">{routeName}</Text>\n    <Text testID={routeName + '-isFirstRoute'}>\n      {String(props.navigation.isFirstRouteInParent())}\n    </Text>\n    <TouchableOpacity\n      testID={routeName + '-next'}\n      onPress={() => props.navigation.navigate(nextRouteName)}\n    >\n      Go to {nextRouteName}\n    </TouchableOpacity>\n    <TouchableOpacity\n      testID={routeName + '-back'}\n      onPress={() => props.navigation.goBack()}\n    >\n      Go back\n    </TouchableOpacity>\n  </View>\n);\n\nit('renders switch navigator with initialRouteName', () => {\n  const SwitchNavigator = createSwitchNavigator(\n    {\n      First: createScreen('First', 'Third'),\n      Second: createScreen('Second', 'First'),\n      Third: createScreen('Third', 'Second'),\n    },\n    {\n      initialRouteName: 'Second',\n    }\n  );\n\n  const App = createAppContainer(SwitchNavigator);\n\n  const { queryByText, getByTestId } = render(<App />);\n\n  expect(queryByText('First')).toBeNull();\n  expect(queryByText('Third')).toBeNull();\n  expect(queryByText('Second')).not.toBeNull();\n\n  fireEvent.press(getByTestId('Second-next'));\n\n  expect(queryByText('First')).not.toBeNull();\n  expect(queryByText('Third')).toBeNull();\n  expect(queryByText('Second')).toBeNull();\n});\n\nit('uses backBehavior=none by default', () => {\n  const SwitchNavigator = createSwitchNavigator({\n    First: createScreen('First', 'Third'),\n    Second: createScreen('Second', 'First'),\n    Third: createScreen('Third', 'Second'),\n  });\n\n  const App = createAppContainer(SwitchNavigator);\n\n  const navigationRef = React.createRef();\n\n  const { getByTestId } = render(<App ref={navigationRef} />);\n\n  expect(getActiveRouteName(navigationRef.current.state.nav)).toBe('First');\n\n  fireEvent.press(getByTestId('First-next'));\n\n  expect(getActiveRouteName(navigationRef.current.state.nav)).toBe('Third');\n\n  fireEvent.press(getByTestId('Third-next'));\n\n  expect(getActiveRouteName(navigationRef.current.state.nav)).toBe('Second');\n\n  fireEvent.press(getByTestId('Second-back'));\n\n  expect(getActiveRouteName(navigationRef.current.state.nav)).toBe('Second');\n});\n\nit('uses backBehavior=initialRoute when specified', () => {\n  const SwitchNavigator = createSwitchNavigator(\n    {\n      First: createScreen('First', 'Third'),\n      Second: createScreen('Second', 'First'),\n      Third: createScreen('Third', 'Second'),\n    },\n    {\n      backBehavior: 'initialRoute',\n    }\n  );\n\n  const App = createAppContainer(SwitchNavigator);\n\n  const navigationRef = React.createRef();\n\n  const { getByTestId } = render(<App ref={navigationRef} />);\n\n  expect(getActiveRouteName(navigationRef.current.state.nav)).toBe('First');\n\n  fireEvent.press(getByTestId('First-next'));\n\n  expect(getActiveRouteName(navigationRef.current.state.nav)).toBe('Third');\n\n  fireEvent.press(getByTestId('Third-next'));\n\n  expect(getActiveRouteName(navigationRef.current.state.nav)).toBe('Second');\n\n  fireEvent.press(getByTestId('Second-back'));\n\n  expect(getActiveRouteName(navigationRef.current.state.nav)).toBe('First');\n});\n\nit('uses backBehavior=order when specified', () => {\n  const SwitchNavigator = createSwitchNavigator(\n    {\n      First: createScreen('First', 'Third'),\n      Second: createScreen('Second', 'First'),\n      Third: createScreen('Third', 'Second'),\n    },\n    {\n      backBehavior: 'order',\n    }\n  );\n\n  const App = createAppContainer(SwitchNavigator);\n\n  const navigationRef = React.createRef();\n\n  const { getByTestId } = render(<App ref={navigationRef} />);\n\n  expect(getActiveRouteName(navigationRef.current.state.nav)).toBe('First');\n\n  fireEvent.press(getByTestId('First-next'));\n\n  expect(getActiveRouteName(navigationRef.current.state.nav)).toBe('Third');\n\n  fireEvent.press(getByTestId('Third-back'));\n\n  expect(getActiveRouteName(navigationRef.current.state.nav)).toBe('Second');\n\n  fireEvent.press(getByTestId('Second-back'));\n\n  expect(getActiveRouteName(navigationRef.current.state.nav)).toBe('First');\n});\n\nit('uses backBehavior=history when specified', () => {\n  const SwitchNavigator = createSwitchNavigator(\n    {\n      First: createScreen('First', 'Third'),\n      Second: createScreen('Second', 'First'),\n      Third: createScreen('Third', 'Second'),\n    },\n    {\n      backBehavior: 'history',\n    }\n  );\n\n  const App = createAppContainer(SwitchNavigator);\n\n  const navigationRef = React.createRef();\n\n  const { getByTestId } = render(<App ref={navigationRef} />);\n\n  expect(getActiveRouteName(navigationRef.current.state.nav)).toBe('First');\n\n  fireEvent.press(getByTestId('First-next'));\n\n  expect(getActiveRouteName(navigationRef.current.state.nav)).toBe('Third');\n\n  fireEvent.press(getByTestId('Third-next'));\n\n  expect(getActiveRouteName(navigationRef.current.state.nav)).toBe('Second');\n\n  fireEvent.press(getByTestId('Second-next'));\n\n  expect(getActiveRouteName(navigationRef.current.state.nav)).toBe('First');\n\n  fireEvent.press(getByTestId('First-next'));\n\n  expect(getActiveRouteName(navigationRef.current.state.nav)).toBe('Third');\n\n  fireEvent.press(getByTestId('Third-back'));\n\n  expect(getActiveRouteName(navigationRef.current.state.nav)).toBe('First');\n\n  fireEvent.press(getByTestId('First-back'));\n\n  expect(getActiveRouteName(navigationRef.current.state.nav)).toBe('Second');\n\n  fireEvent.press(getByTestId('Second-back'));\n\n  expect(getActiveRouteName(navigationRef.current.state.nav)).toBe('Second');\n});\n\nit('returns correct value for canGoBack in a simple navigator', () => {\n  const SwitchNavigator = createSwitchNavigator(\n    {\n      First: createScreen('First', 'Third'),\n      Second: createScreen('Second', 'First'),\n      Third: createScreen('Third', 'Second'),\n    },\n    {\n      backBehavior: 'history',\n    }\n  );\n\n  const App = createAppContainer(SwitchNavigator);\n\n  const navigationRef = React.createRef();\n\n  const { getByTestId } = render(<App ref={navigationRef} />);\n\n  expect(getByTestId('First-isFirstRoute').props.children).toBe('true');\n\n  fireEvent.press(getByTestId('First-next'));\n\n  expect(getByTestId('Third-isFirstRoute').props.children).toBe('false');\n\n  fireEvent.press(getByTestId('Third-next'));\n\n  expect(getByTestId('Second-isFirstRoute').props.children).toBe('false');\n\n  fireEvent.press(getByTestId('Second-back'));\n\n  expect(getByTestId('Third-isFirstRoute').props.children).toBe('false');\n});\n"]}