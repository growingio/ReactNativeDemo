{"version":3,"sources":["getChildEventSubscriber.js"],"names":["getChildEventSubscriber","addListener","key","initialLastFocusEvent","actionSubscribers","Set","willFocusSubscribers","didFocusSubscribers","willBlurSubscribers","didBlurSubscribers","refocusSubscribers","removeAll","forEach","set","clear","upstreamSubscribers","subs","remove","getChildSubscribers","evtName","emit","type","payload","payloadWithType","subscribers","lastFocusEvent","upstreamEvents","map","eventName","state","lastState","action","lastRoutes","routes","focusKey","index","isChildFocused","lastRoute","find","route","newRoute","childPayload","context","isTransitioning","previouslylastFocusEvent","eventHandler","Error","add","delete","console","error"],"mappings":"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","sourcesContent":["/*\n * This is used to extract one children's worth of events from a stream of navigation action events\n *\n * Based on the 'action' events that get fired for this navigation state, this utility will fire\n * focus and blur events for this child\n */\nexport default function getChildEventSubscriber(\n  addListener,\n  key,\n  initialLastFocusEvent = 'didBlur'\n) {\n  const actionSubscribers = new Set();\n  const willFocusSubscribers = new Set();\n  const didFocusSubscribers = new Set();\n  const willBlurSubscribers = new Set();\n  const didBlurSubscribers = new Set();\n  const refocusSubscribers = new Set();\n\n  const removeAll = () => {\n    [\n      actionSubscribers,\n      willFocusSubscribers,\n      didFocusSubscribers,\n      willBlurSubscribers,\n      didBlurSubscribers,\n      refocusSubscribers,\n    ].forEach(set => set.clear());\n\n    upstreamSubscribers.forEach(subs => subs && subs.remove());\n  };\n\n  const getChildSubscribers = evtName => {\n    switch (evtName) {\n      case 'action':\n        return actionSubscribers;\n      case 'willFocus':\n        return willFocusSubscribers;\n      case 'didFocus':\n        return didFocusSubscribers;\n      case 'willBlur':\n        return willBlurSubscribers;\n      case 'didBlur':\n        return didBlurSubscribers;\n      case 'refocus':\n        return refocusSubscribers;\n      default:\n        return null;\n    }\n  };\n\n  const emit = (type, payload) => {\n    const payloadWithType = { ...payload, type };\n    const subscribers = getChildSubscribers(type);\n    subscribers &&\n      subscribers.forEach(subs => {\n        subs(payloadWithType);\n      });\n  };\n\n  // lastFocusEvent keeps track of focus state for one route. First we assume\n  // we are blurred. If we are focused on initialization, the first 'action'\n  // event will cause onFocus+willFocus events because we had previously been\n  // considered blurred\n  let lastFocusEvent = initialLastFocusEvent;\n\n  const upstreamEvents = [\n    'willFocus',\n    'didFocus',\n    'willBlur',\n    'didBlur',\n    'refocus',\n    'action',\n  ];\n\n  const upstreamSubscribers = upstreamEvents.map(eventName =>\n    addListener(eventName, payload => {\n      if (eventName === 'refocus') {\n        emit(eventName, payload);\n        return;\n      }\n\n      const { state, lastState, action } = payload;\n      const lastRoutes = lastState && lastState.routes;\n      const routes = state && state.routes;\n\n      // const lastFocusKey =\n      //   lastState && lastState.routes && lastState.routes[lastState.index].key;\n      const focusKey = routes && routes[state.index].key;\n\n      const isChildFocused = focusKey === key;\n      const lastRoute =\n        lastRoutes && lastRoutes.find(route => route.key === key);\n      const newRoute = routes && routes.find(route => route.key === key);\n      const childPayload = {\n        context: `${key}:${action.type}_${payload.context || 'Root'}`,\n        state: newRoute,\n        lastState: lastRoute,\n        action,\n        type: eventName,\n      };\n      const isTransitioning = !!state && state.isTransitioning;\n\n      const previouslylastFocusEvent = lastFocusEvent;\n\n      if (lastFocusEvent === 'didBlur') {\n        // The child is currently blurred. Look for willFocus conditions\n        if (eventName === 'willFocus' && isChildFocused) {\n          emit((lastFocusEvent = 'willFocus'), childPayload);\n        } else if (eventName === 'action' && isChildFocused) {\n          emit((lastFocusEvent = 'willFocus'), childPayload);\n        }\n      }\n      if (lastFocusEvent === 'willFocus') {\n        // We are currently mid-focus. Look for didFocus conditions.\n        // If state.isTransitioning is false, this child event happens immediately after willFocus\n        if (eventName === 'didFocus' && isChildFocused && !isTransitioning) {\n          emit((lastFocusEvent = 'didFocus'), childPayload);\n        } else if (\n          eventName === 'action' &&\n          isChildFocused &&\n          !isTransitioning\n        ) {\n          emit((lastFocusEvent = 'didFocus'), childPayload);\n        }\n      }\n\n      if (lastFocusEvent === 'didFocus') {\n        // The child is currently focused. Look for blurring events\n        if (!isChildFocused) {\n          // The child is no longer focused within this navigation state\n          emit((lastFocusEvent = 'willBlur'), childPayload);\n        } else if (eventName === 'willBlur') {\n          // The parent is getting a willBlur event\n          emit((lastFocusEvent = 'willBlur'), childPayload);\n        } else if (\n          eventName === 'action' &&\n          previouslylastFocusEvent === 'didFocus'\n        ) {\n          // While focused, pass action events to children for grandchildren focus\n          emit('action', childPayload);\n        }\n      }\n\n      if (lastFocusEvent === 'willBlur') {\n        // The child is mid-blur. Wait for transition to end\n        if (eventName === 'action' && !isChildFocused && !isTransitioning) {\n          // The child is done blurring because transitioning is over, or isTransitioning\n          // never began and didBlur fires immediately after willBlur\n          emit((lastFocusEvent = 'didBlur'), childPayload);\n        } else if (eventName === 'didBlur') {\n          // Pass through the parent didBlur event if it happens\n          emit((lastFocusEvent = 'didBlur'), childPayload);\n        } else if (\n          eventName === 'action' &&\n          isChildFocused &&\n          !isTransitioning\n        ) {\n          emit((lastFocusEvent = 'didFocus'), childPayload);\n        } else if (\n          eventName === 'action' &&\n          isChildFocused &&\n          isTransitioning\n        ) {\n          emit((lastFocusEvent = 'willFocus'), childPayload);\n        }\n      }\n\n      if (lastFocusEvent === 'didBlur' && !newRoute) {\n        removeAll();\n      }\n    })\n  );\n\n  return {\n    addListener(eventName, eventHandler) {\n      const subscribers = getChildSubscribers(eventName);\n      if (!subscribers) {\n        throw new Error(`Invalid event name \"${eventName}\"`);\n      }\n      subscribers.add(eventHandler);\n      const remove = () => {\n        subscribers.delete(eventHandler);\n      };\n      return { remove };\n    },\n    emit(eventName, payload) {\n      if (eventName !== 'refocus') {\n        console.error(\n          `navigation.emit only supports the 'refocus' event currently.`\n        );\n        return;\n      }\n      emit(eventName, payload);\n    },\n  };\n}\n"]}