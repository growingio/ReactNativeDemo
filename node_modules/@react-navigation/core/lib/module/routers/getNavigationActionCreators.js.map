{"version":3,"sources":["getNavigationActionCreators.js"],"names":["NavigationActions","invariant","getNavigationActionCreators","route","goBack","key","actualizedKey","undefined","back","navigate","navigateTo","params","action","routeName","setParams"],"mappings":"AAAA,MAAO,GAAKA,CAAAA,iBAAZ,KAAmC,sBAAnC,CACA,MAAOC,CAAAA,SAAP,KAAsB,oBAAtB,CAEA,GAAMC,CAAAA,2BAA2B,CAAG,QAA9BA,CAAAA,2BAA8B,CAAAC,KAAK,CAAI,CAC3C,MAAO,CACLC,MAAM,CAAE,gBAAAC,GAAG,CAAI,CACb,GAAIC,CAAAA,aAAa,CAAGD,GAApB,CACA,GAAIA,GAAG,GAAKE,SAAR,EAAqBJ,KAAK,CAACE,GAA/B,CAAoC,CAClCJ,SAAS,CAAC,MAAOE,CAAAA,KAAK,CAACE,GAAb,GAAqB,QAAtB,CAAgC,wBAAhC,CAAT,CACAC,aAAa,CAAGH,KAAK,CAACE,GAAtB,CACD,CACD,MAAOL,CAAAA,iBAAiB,CAACQ,IAAlB,CAAuB,CAAEH,GAAG,CAAEC,aAAP,CAAvB,CAAP,CACD,CARI,CASLG,QAAQ,CAAE,kBAACC,UAAD,CAAaC,MAAb,CAAqBC,MAArB,CAAgC,CACxC,GAAI,MAAOF,CAAAA,UAAP,GAAsB,QAA1B,CAAoC,CAClC,MAAOV,CAAAA,iBAAiB,CAACS,QAAlB,CAA2B,CAChCI,SAAS,CAAEH,UADqB,CAEhCC,MAAM,CAANA,MAFgC,CAGhCC,MAAM,CAANA,MAHgC,CAA3B,CAAP,CAKD,CACDX,SAAS,CACP,MAAOS,CAAAA,UAAP,GAAsB,QADf,CAEP,uCAFO,CAAT,CAIAT,SAAS,CACPU,MAAM,EAAI,IADH,CAEP,sEAFO,CAAT,CAIAV,SAAS,CACPW,MAAM,EAAI,IADH,CAEP,4EAFO,CAAT,CAIA,MAAOZ,CAAAA,iBAAiB,CAACS,QAAlB,CAA2BC,UAA3B,CAAP,CACD,CA9BI,CA+BLI,SAAS,CAAE,mBAAAH,MAAM,CAAI,CACnBV,SAAS,CACPE,KAAK,CAACE,GAAN,EAAa,MAAOF,CAAAA,KAAK,CAACE,GAAb,GAAqB,QAD3B,CAEP,8CAFO,CAAT,CAIA,MAAOL,CAAAA,iBAAiB,CAACc,SAAlB,CAA4B,CAAEH,MAAM,CAANA,MAAF,CAAUN,GAAG,CAAEF,KAAK,CAACE,GAArB,CAA5B,CAAP,CACD,CArCI,CAAP,CAuCD,CAxCD,CA0CA,cAAeH,CAAAA,2BAAf","sourcesContent":["import * as NavigationActions from '../NavigationActions';\nimport invariant from '../utils/invariant';\n\nconst getNavigationActionCreators = route => {\n  return {\n    goBack: key => {\n      let actualizedKey = key;\n      if (key === undefined && route.key) {\n        invariant(typeof route.key === 'string', 'key should be a string');\n        actualizedKey = route.key;\n      }\n      return NavigationActions.back({ key: actualizedKey });\n    },\n    navigate: (navigateTo, params, action) => {\n      if (typeof navigateTo === 'string') {\n        return NavigationActions.navigate({\n          routeName: navigateTo,\n          params,\n          action,\n        });\n      }\n      invariant(\n        typeof navigateTo === 'object',\n        'Must navigateTo an object or a string'\n      );\n      invariant(\n        params == null,\n        'Params must not be provided to .navigate() when specifying an object'\n      );\n      invariant(\n        action == null,\n        'Child action must not be provided to .navigate() when specifying an object'\n      );\n      return NavigationActions.navigate(navigateTo);\n    },\n    setParams: params => {\n      invariant(\n        route.key && typeof route.key === 'string',\n        'setParams cannot be called by root navigator'\n      );\n      return NavigationActions.setParams({ params, key: route.key });\n    },\n  };\n};\n\nexport default getNavigationActionCreators;\n"]}