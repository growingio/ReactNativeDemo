{"version":3,"sources":["pathUtils-test.js"],"names":["urlToPathAndParams","it","path","params","expect","toBe","toEqual","asdf","dude"],"mappings":"AAAA,OAASA,kBAAT,KAAmC,cAAnC,CAEAC,EAAE,CAAC,0BAAD,CAA6B,UAAM,yBACVD,kBAAkB,CAAC,QAAD,CADR,CAC3BE,IAD2B,qBAC3BA,IAD2B,CACrBC,MADqB,qBACrBA,MADqB,CAEnCC,MAAM,CAACF,IAAD,CAAN,CAAaG,IAAb,CAAkB,EAAlB,EACAD,MAAM,CAACD,MAAD,CAAN,CAAeG,OAAf,CAAuB,EAAvB,EACD,CAJC,CAAF,CAMAL,EAAE,CAAC,iCAAD,CAAoC,UAAM,0BACjBD,kBAAkB,CAAC,iBAAD,CADD,CAClCE,IADkC,sBAClCA,IADkC,CAC5BC,MAD4B,sBAC5BA,MAD4B,CAE1CC,MAAM,CAACF,IAAD,CAAN,CAAaG,IAAb,CAAkB,WAAlB,EACAD,MAAM,CAACD,MAAD,CAAN,CAAeG,OAAf,CAAuB,EAAvB,EACD,CAJC,CAAF,CAMAL,EAAE,CAAC,mCAAD,CAAsC,UAAM,0BACnBD,kBAAkB,CAAC,gBAAD,CADC,CACpCE,IADoC,sBACpCA,IADoC,CAC9BC,MAD8B,sBAC9BA,MAD8B,CAE5CC,MAAM,CAACF,IAAD,CAAN,CAAaG,IAAb,CAAkB,SAAlB,EACAD,MAAM,CAACD,MAAD,CAAN,CAAeG,OAAf,CAAuB,EAAvB,EACD,CAJC,CAAF,CAMAL,EAAE,CAAC,gCAAD,CAAmC,UAAM,0BAChBD,kBAAkB,CAAC,+BAAD,CADF,CACjCE,IADiC,sBACjCA,IADiC,CAC3BC,MAD2B,sBAC3BA,MAD2B,CAEzCC,MAAM,CAACF,IAAD,CAAN,CAAaG,IAAb,CAAkB,SAAlB,EACAD,MAAM,CAACD,MAAD,CAAN,CAAeG,OAAf,CAAuB,CAAEC,IAAI,CAAE,GAAR,CAAaC,IAAI,CAAE,KAAnB,CAAvB,EACD,CAJC,CAAF,CAMAP,EAAE,CAAC,0CAAD,CAA6C,UAAM,0BAC1BD,kBAAkB,CACzC,oCADyC,CAEzC,sBAFyC,CADQ,CAC3CE,IAD2C,sBAC3CA,IAD2C,CACrCC,MADqC,sBACrCA,MADqC,CAKnDC,MAAM,CAACF,IAAD,CAAN,CAAaG,IAAb,CAAkB,SAAlB,EACAD,MAAM,CAACD,MAAD,CAAN,CAAeG,OAAf,CAAuB,CAAEC,IAAI,CAAE,GAAR,CAAvB,EACD,CAPC,CAAF","sourcesContent":["import { urlToPathAndParams } from '../pathUtils';\n\nit('urlToPathAndParams empty', () => {\n  const { path, params } = urlToPathAndParams('foo://');\n  expect(path).toBe('');\n  expect(params).toEqual({});\n});\n\nit('urlToPathAndParams empty params', () => {\n  const { path, params } = urlToPathAndParams('foo://foo/bar/b');\n  expect(path).toBe('foo/bar/b');\n  expect(params).toEqual({});\n});\n\nit('urlToPathAndParams trailing slash', () => {\n  const { path, params } = urlToPathAndParams('foo://foo/bar/');\n  expect(path).toBe('foo/bar');\n  expect(params).toEqual({});\n});\n\nit('urlToPathAndParams with params', () => {\n  const { path, params } = urlToPathAndParams('foo://foo/bar?asdf=1&dude=foo');\n  expect(path).toBe('foo/bar');\n  expect(params).toEqual({ asdf: '1', dude: 'foo' });\n});\n\nit('urlToPathAndParams with custom delimeter', () => {\n  const { path, params } = urlToPathAndParams(\n    'https://example.com/foo/bar?asdf=1',\n    'https://example.com/'\n  );\n  expect(path).toBe('foo/bar');\n  expect(params).toEqual({ asdf: '1' });\n});\n"]}