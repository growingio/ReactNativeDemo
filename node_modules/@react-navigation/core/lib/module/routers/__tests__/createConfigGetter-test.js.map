{"version":3,"sources":["createConfigGetter-test.js"],"names":["Component","createConfigGetter","dummyEventSubscriber","remove","it","HomeScreen","navigationOptions","navigation","title","state","params","user","gesturesEnabled","SettingsScreen","NotificationScreen","fullscreen","getScreenOptions","Home","screen","Settings","Notifications","routes","key","routeName","expect","dispatch","addListener","toEqual","toThrowError"],"mappings":"mVAAA,OAASA,SAAT,KAA0B,OAA1B,CACA,MAAOC,CAAAA,kBAAP,KAA+B,uBAA/B,CAEA,GAAMC,CAAAA,oBAAoB,CAAG,QAAvBA,CAAAA,oBAAuB,SAAO,CAClCC,MAAM,CAAE,iBAAM,CAAE,CADkB,CAAP,EAA7B,CAIAC,EAAE,CAAC,8BAAD,CAAiC,UAAM,IACjCC,CAAAA,UADiC,uQAS5B,CACP,MAAO,KAAP,CACD,CAXoC,wBACdL,SADc,EACjCK,UADiC,CAE9BC,iBAF8B,CAEV,kBAAGC,CAAAA,UAAH,MAAGA,UAAH,OAAqB,CAC9CC,KAAK,aACHD,UAAU,CAACE,KAAX,CAAiBC,MAAjB,CAA0BH,UAAU,CAACE,KAAX,CAAiBC,MAAjB,CAAwBC,IAAlD,CAAyD,WADtD,CADyC,CAI9CC,eAAe,CAAE,IAJ6B,CAArB,EAFU,IAcjCC,CAAAA,cAdiC,6RAoB5B,CACP,MAAO,KAAP,CACD,CAtBoC,4BAcVb,SAdU,EAcjCa,cAdiC,CAe9BP,iBAf8B,CAeV,CACzBE,KAAK,CAAE,aADkB,CAEzBI,eAAe,CAAE,KAFQ,CAfU,IAyBjCE,CAAAA,kBAzBiC,iTAiC5B,CACP,MAAO,KAAP,CACD,CAnCoC,gCAyBNd,SAzBM,EAyBjCc,kBAzBiC,CA0B9BR,iBA1B8B,CA0BV,mBAAGC,CAAAA,UAAH,OAAGA,UAAH,OAAqB,CAC9CC,KAAK,CAAE,IADuC,CAE9CI,eAAe,CAAEL,UAAU,CAACE,KAAX,CAAiBC,MAAjB,CACb,CAACH,UAAU,CAACE,KAAX,CAAiBC,MAAjB,CAAwBK,UADZ,CAEb,IAJ0C,CAArB,EA1BU,CAsCvC,GAAMC,CAAAA,gBAAgB,CAAGf,kBAAkB,CAAC,CAC1CgB,IAAI,CAAE,CAAEC,MAAM,CAAEb,UAAV,CADoC,CAE1Cc,QAAQ,CAAE,CAAED,MAAM,CAAEL,cAAV,CAFgC,CAG1CO,aAAa,CAAE,CACbF,MAAM,CAAEJ,kBADK,CAEbR,iBAAiB,CAAE,CACjBE,KAAK,CAAE,sBADU,CAFN,CAH2B,CAAD,CAA3C,CAWA,GAAMa,CAAAA,MAAM,CAAG,CACb,CAAEC,GAAG,CAAE,GAAP,CAAYC,SAAS,CAAE,MAAvB,CADa,CAEb,CAAED,GAAG,CAAE,GAAP,CAAYC,SAAS,CAAE,MAAvB,CAA+Bb,MAAM,CAAE,CAAEC,IAAI,CAAE,MAAR,CAAvC,CAFa,CAGb,CAAEW,GAAG,CAAE,GAAP,CAAYC,SAAS,CAAE,UAAvB,CAHa,CAIb,CAAED,GAAG,CAAE,GAAP,CAAYC,SAAS,CAAE,eAAvB,CAJa,CAKb,CAAED,GAAG,CAAE,GAAP,CAAYC,SAAS,CAAE,eAAvB,CAAwCb,MAAM,CAAE,CAAEK,UAAU,CAAE,IAAd,CAAhD,CALa,CAAf,CAQAS,MAAM,CACJR,gBAAgB,CACd,CACEP,KAAK,CAAEY,MAAM,CAAC,CAAD,CADf,CAEEI,QAAQ,CAAE,0BAAM,MAAN,EAFZ,CAGEC,WAAW,CAAExB,oBAHf,CADc,CAMd,EANc,CAAhB,CAOEM,KARE,CAAN,CASEmB,OATF,CASU,mBATV,EAUAH,MAAM,CACJR,gBAAgB,CACd,CACEP,KAAK,CAAEY,MAAM,CAAC,CAAD,CADf,CAEEI,QAAQ,CAAE,0BAAM,MAAN,EAFZ,CAGEC,WAAW,CAAExB,oBAHf,CADc,CAMd,EANc,CAAhB,CAOEM,KARE,CAAN,CASEmB,OATF,CASU,cATV,EAUAH,MAAM,CACJR,gBAAgB,CACd,CACEP,KAAK,CAAEY,MAAM,CAAC,CAAD,CADf,CAEEI,QAAQ,CAAE,0BAAM,MAAN,EAFZ,CAGEC,WAAW,CAAExB,oBAHf,CADc,CAMd,EANc,CAAhB,CAOEU,eARE,CAAN,CASEe,OATF,CASU,IATV,EAUAH,MAAM,CACJR,gBAAgB,CACd,CACEP,KAAK,CAAEY,MAAM,CAAC,CAAD,CADf,CAEEI,QAAQ,CAAE,0BAAM,MAAN,EAFZ,CAGEC,WAAW,CAAExB,oBAHf,CADc,CAMd,EANc,CAAhB,CAOEM,KARE,CAAN,CASEmB,OATF,CASU,aATV,EAUAH,MAAM,CACJR,gBAAgB,CACd,CACEP,KAAK,CAAEY,MAAM,CAAC,CAAD,CADf,CAEEI,QAAQ,CAAE,0BAAM,MAAN,EAFZ,CAGEC,WAAW,CAAExB,oBAHf,CADc,CAMd,EANc,CAAhB,CAOEU,eARE,CAAN,CASEe,OATF,CASU,KATV,EAUAH,MAAM,CACJR,gBAAgB,CACd,CACEP,KAAK,CAAEY,MAAM,CAAC,CAAD,CADf,CAEEI,QAAQ,CAAE,0BAAM,MAAN,EAFZ,CAGEC,WAAW,CAAExB,oBAHf,CADc,CAMd,EANc,CAAhB,CAOEM,KARE,CAAN,CASEmB,OATF,CASU,sBATV,EAUAH,MAAM,CACJR,gBAAgB,CACd,CACEP,KAAK,CAAEY,MAAM,CAAC,CAAD,CADf,CAEEI,QAAQ,CAAE,0BAAM,MAAN,EAFZ,CAGEC,WAAW,CAAExB,oBAHf,CADc,CAMd,EANc,CAAhB,CAOEU,eARE,CAAN,CASEe,OATF,CASU,IATV,EAUAH,MAAM,CACJR,gBAAgB,CACd,CACEP,KAAK,CAAEY,MAAM,CAAC,CAAD,CADf,CAEEI,QAAQ,CAAE,0BAAM,MAAN,EAFZ,CAGEC,WAAW,CAAExB,oBAHf,CADc,CAMd,EANc,CAAhB,CAOEU,eARE,CAAN,CASEe,OATF,CASU,KATV,EAUD,CAzIC,CAAF,CA2IAvB,EAAE,CAAC,0CAAD,CAA6C,UAAM,CACnD,GAAMC,CAAAA,UAAU,CAAG,QAAbA,CAAAA,UAAa,SAAM,KAAN,EAAnB,CACAA,UAAU,CAACC,iBAAX,CAA+B,CAC7BE,KAAK,CAAE,aADsB,CAE7BI,eAAe,CAAE,IAFY,CAA/B,CAKA,GAAMI,CAAAA,gBAAgB,CAAGf,kBAAkB,CAAC,CAC1CgB,IAAI,CAAE,CAAEC,MAAM,CAAEb,UAAV,CADoC,CAAD,CAA3C,CAIA,GAAMgB,CAAAA,MAAM,CAAG,CAAC,CAAEC,GAAG,CAAE,GAAP,CAAYC,SAAS,CAAE,UAAvB,CAAD,CAAf,CAEAC,MAAM,CAAC,iBACLR,CAAAA,gBAAgB,CACd,CACEP,KAAK,CAAEY,MAAM,CAAC,CAAD,CADf,CAEEI,QAAQ,CAAE,0BAAM,MAAN,EAFZ,CAGEC,WAAW,CAAExB,oBAHf,CADc,CAMd,EANc,CADX,EAAD,CAAN,CASE0B,YATF,CAUE,qEAVF,EAYD,CAzBC,CAAF","sourcesContent":["import { Component } from 'react';\nimport createConfigGetter from '../createConfigGetter';\n\nconst dummyEventSubscriber = () => ({\n  remove: () => {},\n});\n\nit('should get config for screen', () => {\n  class HomeScreen extends Component {\n    static navigationOptions = ({ navigation }) => ({\n      title: `Welcome ${\n        navigation.state.params ? navigation.state.params.user : 'anonymous'\n      }`,\n      gesturesEnabled: true,\n    });\n\n    render() {\n      return null;\n    }\n  }\n\n  class SettingsScreen extends Component {\n    static navigationOptions = {\n      title: 'Settings!!!',\n      gesturesEnabled: false,\n    };\n\n    render() {\n      return null;\n    }\n  }\n\n  class NotificationScreen extends Component {\n    static navigationOptions = ({ navigation }) => ({\n      title: '42',\n      gesturesEnabled: navigation.state.params\n        ? !navigation.state.params.fullscreen\n        : true,\n    });\n\n    render() {\n      return null;\n    }\n  }\n\n  const getScreenOptions = createConfigGetter({\n    Home: { screen: HomeScreen },\n    Settings: { screen: SettingsScreen },\n    Notifications: {\n      screen: NotificationScreen,\n      navigationOptions: {\n        title: '10 new notifications',\n      },\n    },\n  });\n\n  const routes = [\n    { key: 'A', routeName: 'Home' },\n    { key: 'B', routeName: 'Home', params: { user: 'jane' } },\n    { key: 'C', routeName: 'Settings' },\n    { key: 'D', routeName: 'Notifications' },\n    { key: 'E', routeName: 'Notifications', params: { fullscreen: true } },\n  ];\n\n  expect(\n    getScreenOptions(\n      {\n        state: routes[0],\n        dispatch: () => false,\n        addListener: dummyEventSubscriber,\n      },\n      {}\n    ).title\n  ).toEqual('Welcome anonymous');\n  expect(\n    getScreenOptions(\n      {\n        state: routes[1],\n        dispatch: () => false,\n        addListener: dummyEventSubscriber,\n      },\n      {}\n    ).title\n  ).toEqual('Welcome jane');\n  expect(\n    getScreenOptions(\n      {\n        state: routes[0],\n        dispatch: () => false,\n        addListener: dummyEventSubscriber,\n      },\n      {}\n    ).gesturesEnabled\n  ).toEqual(true);\n  expect(\n    getScreenOptions(\n      {\n        state: routes[2],\n        dispatch: () => false,\n        addListener: dummyEventSubscriber,\n      },\n      {}\n    ).title\n  ).toEqual('Settings!!!');\n  expect(\n    getScreenOptions(\n      {\n        state: routes[2],\n        dispatch: () => false,\n        addListener: dummyEventSubscriber,\n      },\n      {}\n    ).gesturesEnabled\n  ).toEqual(false);\n  expect(\n    getScreenOptions(\n      {\n        state: routes[3],\n        dispatch: () => false,\n        addListener: dummyEventSubscriber,\n      },\n      {}\n    ).title\n  ).toEqual('10 new notifications');\n  expect(\n    getScreenOptions(\n      {\n        state: routes[3],\n        dispatch: () => false,\n        addListener: dummyEventSubscriber,\n      },\n      {}\n    ).gesturesEnabled\n  ).toEqual(true);\n  expect(\n    getScreenOptions(\n      {\n        state: routes[4],\n        dispatch: () => false,\n        addListener: dummyEventSubscriber,\n      },\n      {}\n    ).gesturesEnabled\n  ).toEqual(false);\n});\n\nit('should throw if the route does not exist', () => {\n  const HomeScreen = () => null;\n  HomeScreen.navigationOptions = {\n    title: 'Home screen',\n    gesturesEnabled: true,\n  };\n\n  const getScreenOptions = createConfigGetter({\n    Home: { screen: HomeScreen },\n  });\n\n  const routes = [{ key: 'B', routeName: 'Settings' }];\n\n  expect(() =>\n    getScreenOptions(\n      {\n        state: routes[0],\n        dispatch: () => false,\n        addListener: dummyEventSubscriber,\n      },\n      {}\n    )\n  ).toThrowError(\n    \"There is no route defined for key Settings.\\nMust be one of: 'Home'\"\n  );\n});\n"]}