{"version":3,"sources":["getNavigation-test.js"],"names":["getNavigation","it","router","getActionCreators","getStateForAction","action","lastState","dispatch","jest","fn","topNav","Set","navigate","expect","mock","calls","length","toBe","type","routeName","foo","bar","actionSubscribers","navigation","routerA","childRouters","RouteA","initState","index","routes","key","childNavA","getChildNavigation"],"mappings":"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","sourcesContent":["import getNavigation from '../getNavigation';\n\nit('getNavigation provides default action helpers', () => {\n  const router = {\n    getActionCreators: () => ({}),\n    getStateForAction(action, lastState = {}) {\n      return lastState;\n    },\n  };\n\n  const dispatch = jest.fn();\n\n  const topNav = getNavigation(\n    router,\n    {},\n    dispatch,\n    new Set(),\n    () => ({}),\n    () => topNav\n  );\n\n  topNav.navigate('GreatRoute');\n\n  expect(dispatch.mock.calls.length).toBe(1);\n  expect(dispatch.mock.calls[0][0].type).toBe('Navigation/NAVIGATE');\n  expect(dispatch.mock.calls[0][0].routeName).toBe('GreatRoute');\n});\n\nit('getNavigation provides router action helpers', () => {\n  const router = {\n    getActionCreators: () => ({\n      foo: bar => ({ type: 'FooBarAction', bar }),\n    }),\n    getStateForAction(action, lastState = {}) {\n      return lastState;\n    },\n  };\n\n  const dispatch = jest.fn();\n\n  const topNav = getNavigation(\n    router,\n    {},\n    dispatch,\n    new Set(),\n    () => ({}),\n    () => topNav\n  );\n\n  topNav.foo('Great');\n\n  expect(dispatch.mock.calls.length).toBe(1);\n  expect(dispatch.mock.calls[0][0].type).toBe('FooBarAction');\n  expect(dispatch.mock.calls[0][0].bar).toBe('Great');\n});\n\nit('getNavigation get child navigation with router', () => {\n  const actionSubscribers = new Set();\n  let navigation = null;\n\n  const routerA = {\n    getActionCreators: () => ({}),\n    getStateForAction(action, lastState = {}) {\n      return lastState;\n    },\n  };\n  const router = {\n    childRouters: {\n      RouteA: routerA,\n    },\n    getActionCreators: () => ({}),\n    getStateForAction(action, lastState = {}) {\n      return lastState;\n    },\n  };\n\n  const initState = {\n    index: 0,\n    routes: [\n      {\n        key: 'a',\n        routeName: 'RouteA',\n        routes: [{ key: 'c', routeName: 'RouteC' }],\n        index: 0,\n      },\n      { key: 'b', routeName: 'RouteB' },\n    ],\n  };\n\n  const topNav = getNavigation(\n    router,\n    initState,\n    () => {},\n    actionSubscribers,\n    () => ({}),\n    () => navigation\n  );\n\n  const childNavA = topNav.getChildNavigation('a');\n\n  expect(childNavA.router).toBe(routerA);\n});\n"]}